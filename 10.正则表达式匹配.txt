给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素

所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:

    s 可能为空，且只包含从 a-z 的小写字母。
    p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。

示例 1:
输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。

【方法一】暴力递归
class Solution {
public:
    bool isMatch(string s, string p) {
        if(!p.size())   return s.size()==0;
        bool firstmatch=s.size()>0 &&( s[0]==p[0] || p[0]=='.');
        if(p[1]=='*'){
            return isMatch(s,p.substr(2)) || (firstmatch && isMatch(s.substr(1),p));
        }
        else 
            return firstmatch && isMatch(s.substr(1,s.size()-1),p.substr(1,p.size()-1));
    }
};
【优化】方法一substr会产生大量子串，用char*解决这个问题
1、如果p为空，s为空匹配，s非空不匹配；
2、s非空，p == s || p == '.'时第一个字符匹配；
3、(p+1) != ''，则递归判断剩下的是否匹配 first_match && isMatch(++s, ++p)
4、(p+1) == '*'，则有两种情况匹配：
a: *匹配0个字符，s匹配剩下的，即isMatch(s, p+2)
b: *匹配1个字符，继续用p匹配剩下的s，即first_match && isMatch(s+1, p)

class Solution {
public:
    bool isMatch(string s, string p) {
        return isMatch(s.c_str(), p.c_str());
    }
    
    bool isMatch(const char* s, const char* p) {
        if(*p == 0) return *s == 0;
        
        bool first_match = *s && (*s == *p || *p == '.');
        
        if(*(p+1) == '*'){
            return isMatch(s, p+2) || (first_match && isMatch(++s, p));
        }
        else{
            return first_match && isMatch(++s, ++p);
        }
    }
};
【方法二】流氓做法
class Solution {
public:
    bool isMatch(string s, string p) {
        return regex_match(s,regex(p));
    }
};

【方法三】DP
dp[i][j] 表示s字符串从i到结尾 和p字符串从 j到结尾 是否匹配。
1.s[i]==p[j]时,dp[i][j]=dp[i-1][j-1]
2.p[j]=='.'  时,dp[i][j]=dp[i-1][j-1]
3.p[j]=='*' 时,1)dp[i][j]=dp[i][j-1] || dp[i][j-2]                        //分别对应 a* 匹配 a 或 空字符 ''情况
	or 2)p[j-1]=='.'时,                  dp[i][j] |= dp[i-1][j]//.*匹配任意字符串 
	or 3)s[i]==p[j-1](==s[i-1])时,  dp[i][j] |= dp[i-1][j] //a*匹配多个a情况，括号内条件实际上可以省略，因为在这些前置条件下
					            当s[i-1]!=p[j-1]，dp[i-1][j]=0;当s[i-1]==p[j-1]，dp[i-1][j]=1
因为p="",s="c*"匹配，所以可以通过在p和s字符首加个相同的字符来初始化。
class Solution {
public:
    bool isMatch(string s, string p) {
        s='a'+s;
        p='a'+p;
        int sn=s.size(),pn=p.size();
        bool dp[sn][pn];
        memset(dp,false,sizeof(dp));
        dp[0][0]=1;
        for(int i=1;i<pn;i++){
            if(p[i]=='*')
                dp[0][i]=dp[0][i-1]||(i>=2 && dp[0][i-2]);
        }
        for(int i=1;i<sn;i++){
            for(int j=1;j<pn;j++){
                if((p[j]=='.' ||s[i]==p[j]))
                    dp[i][j]=dp[i-1][j-1];
                else if(p[j]=='*'){
                    dp[i][j]=dp[i][j-1]||(j>=2 && dp[i][j-2]);
                    if( s[i]==p[j-1] ||p[j-1]=='.')
                        dp[i][j] |= dp[i-1][j];
                }
            }
        }
        return dp[sn-1][pn-1];
    }
};

【优化】
class Solution {
public:
    bool isMatch(string s, string p) {
        vector<vector<int>> dp(s.size()+1,vector<int>(p.size()+1,0));
        dp[s.size()][p.size()]=1;
        for (int i=s.size();i>=0;i--){
            for (int j=p.size()-1;j>=0;j--){
                bool match=(i<s.size())&&((s[i]==p[j])||(p[j]=='.'));
                if ((j<p.size()-1)&&p[j+1]=='*'){
                    dp[i][j]=dp[i][j+2]||(match&&dp[i+1][j]);
                }else{
                    dp[i][j]=match&&dp[i+1][j+1];
                }
            }
        }
        return dp[0][0];
    }
};