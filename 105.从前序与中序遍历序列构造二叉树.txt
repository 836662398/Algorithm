根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]

返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

【思路】先构造根节点，再构造**左子树**，接下来构造**右子树**，其中，构造**左子树**和**右子树**是一个子问题，递归处理即可。
递归函数的设计上，仍旧采用**左闭右闭**对数组局部进行描述。
优化：在 inorder 中查找 root 位置时，用一个哈希表可以实现O(1)查找。
class Solution {
public:
    vector<int> preorder;
    vector<int> inorder;
    unordered_map<int,int> hashmap;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        this->preorder=preorder;
        this->inorder=inorder;
        for(int i=0;i<inorder.size();i++)
            hashmap[inorder[i]]=i;
        return helper(0,preorder.size()-1,0,inorder.size()-1);
    }
    TreeNode* helper(int pre_begin,int pre_end,int in_begin,int in_end){
        if(pre_end<pre_begin)
            return nullptr;
        int pivot=preorder[pre_begin];
        int leftcount=hashmap[pivot]-in_begin;
        TreeNode* root=new TreeNode(pivot);
        root->left=helper(pre_begin+1,pre_begin+leftcount,in_begin,in_begin+leftcount-1);
        root->right=helper(pre_begin+leftcount+1,pre_end,in_begin+leftcount+1,in_end);
        return root;
    }
};