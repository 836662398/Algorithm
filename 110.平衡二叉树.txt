给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

    一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7

返回 true 。

【方法一】暴力，存在重复计算
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(!root)   
            return true;
        if(isBalanced(root->left)&&isBalanced(root->right))
            return abs(depth(root->left)-depth(root->right))<2;
        else
            return false;
    }
    int depth(TreeNode* root){
        if(!root)   
            return 0;
        return 1+max(depth(root->left),depth(root->right));
    }
};
【方法二】求深度的同时，判断是否平衡
class Solution {
public:
    bool res=true;
    bool isBalanced(TreeNode* root) {
        depth(root);
        return res;
    }
    int depth(TreeNode* root){
        if(!root)
            return 0;
        int left=depth(root->left);
        int right=depth(root->right);
        if(abs(left-right)>1)
            res=false;
        return max(left,right);
    }
};
