给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}

填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL。
提示：

    你只能使用常量级额外空间。
    使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。

【方法一】不使用之前的next，递归
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)   return nullptr;
        connect(root->left);
        connect(root->right);
        Node* root1=root->left;
        Node* root2=root->right;
        while(root1){
            root1->next=root2;
            root1=root1->right;
            root2=root2->left;
        }
        return root;
    }
};
【方法二】使用之前的next，递归
class Solution {
public:
    Node* connect(Node* root) {
        if(!root ||!root->left)   return root;
        root->left->next=root->right;
        if(root->next)
            root->right->next=root->next->left;
        connect(root->left);
        connect(root->right);
        return root;
    }
};
【方法三】使用之前的next,非递归
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)    return nullptr;
        Node* mostleft=root;
        while(mostleft->left){
            Node* node=mostleft;
            while(node){
                node->left->next=node->right;
                if(node->next)
                    node->right->next=node->next->left;
                node=node->next;
            }
            mostleft=mostleft->left;
        }
        return root;
    }
};
