你现在手里有一份大小为 N x N 的「地图」（网格） grid，上面的每个「区域」（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，请你找出一个海洋区域，这个海洋区域到离它最近的陆地区域的距离是最大的。

我们这里说的距离是「曼哈顿距离」（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。

如果我们的地图上只有陆地或者海洋，请返回 -1。

【思路】多源BFS，同腐烂的橘子。
class Solution {
public:
    int maxDistance(vector<vector<int>>& grid){
        int x[4]={1,0,-1,0};
        int y[4]={0,1,0,-1};
        int n=grid.size();
        queue<pair<int,int>> bfsque;
        int ocean=n*n,res=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    bfsque.push({i,j});
                    ocean--;
                }   
            }
        }
        if(ocean==0 ||ocean==n*n) return -1;
        while(!bfsque.empty()&& ocean!=0){
            res++;
            for(int k=bfsque.size();k>0;k--){
                pair<int,int> tmp=bfsque.front();
                bfsque.pop();
                int i=tmp.first,j=tmp.second;
                for(int t=0;t<4;t++){
                    int dx=i+x[t];
                    int dy=j+y[t];
                    if(dx>=0 &&dx<n && dy>=0 &&dy<n&&grid[dx][dy]==0 ){
                        bfsque.push({dx,dy});
                        grid[dx][dy]=1;
                        ocean--;
                    }
                }
            }
        }
        return res;
    }
};