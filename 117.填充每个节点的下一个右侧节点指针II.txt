给定一个二叉树

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}

填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
初始状态下，所有 next 指针都被设置为 NULL。

进阶：
    你只能使用常量级额外空间。
    使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。

示例：
输入：root = [1,2,3,4,5,null,7]
输出：[1,#,2,3,#,4,5,7,#]
解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。

提示：
    树中的节点数小于 6000
    -100 <= node.val <= 100

【方法一】
使用父节点next来连接
注意：递归时要先递归右子树，否则上级节点next关系没建好，下级无法成功连接next
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)   return root;
        helper(root->right,root);
        helper(root->left,root);
        return root;
    }
    void helper(Node* root,Node* parent){
        if(!root)   return;
        if(parent->left==root&&parent->right){
            root->next=parent->right;
        }
        else{
            Node* node=parent->next;
            while(node){
                if(node->left){
                    root->next=node->left;
                    break;
                }
                else if(node->right){
                    root->next=node->right;
                    break;
                }
                else
                    node=node->next;
            }
        }
        helper(root->right,root);
        helper(root->left,root);
    }
};
【方法二】
使用findnext()函数找到应连接的下一个节点
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)   return root;
        if(root->left)
            root->left->next=root->right? root->right :findnext(root);
        if(root->right)
            root->right->next=findnext(root);
        connect(root->right);
        connect(root->left);
        return root;
    }
    Node* findnext(Node* root){
        Node* node=root->next;
        while(node){
            if(node->left)
                return node->left;
            else if(node->right)
                return node->right;
            else
                node=node->next;
        }
        return nullptr;
    }
};