给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

 

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

 

说明：
如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。

【方法一】自顶向下DP
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty())    return 0;
        int hei=triangle.size();
        vector<int> dp(hei,0);
        dp[0]=triangle[0][0];
        int res=INT_MAX;
        for(int i=1;i<hei;i++){
            for(int j=i;j>=0;j--){
                dp[j]=min(j==i?INT_MAX:dp[j], j-1>=0?dp[j-1]:INT_MAX)+triangle[i][j];
            }
        }
        for(int i=0;i<hei;i++)
            res=min(res,dp[i]);
        return res;
    }
};
【方法二】自底向上DP，更简洁！
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int hei=triangle.size();
        if(!hei)    return 0;
        vector<int> dp(hei+1,0);
        for(int i=hei-1;i>=0;i--){
            for(int j=0;j<=i;j++){
                dp[j]=min(dp[j],dp[j+1])+triangle[i][j];
            }
        }
        return dp[0];
    }
};
