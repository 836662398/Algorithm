给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

    每次转换只能改变一个字母。
    转换过程中的中间单词必须是字典中的单词。

说明:

    如果不存在这样的转换序列，返回 0。
    所有单词具有相同的长度。
    所有单词只由小写字母组成。
    字典中不存在重复的单词。
    你可以假设 beginWord 和 endWord 是非空的，且二者不相同。

示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出: 5

解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
     返回它的长度 5。

示例 2:

输入:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

输出: 0

解释: endWord "cog" 不在字典中，所以无法进行转换。

【方法一】优化双端BFS
1.双端不一起搜索，而是每次都选择元素少的一端进行一次搜索；
2.搜索时，将字符串每一元素位置替换为‘a’~'z' 间任意一元素，若替换后的新元素，在字典里，且没有用过，则放进新集合中。
3.用set （至少两个）实现BFS，可以快速查找。
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> worddic(wordList.begin(),wordList.end());
        unordered_set<string> beginset={beginWord};
        unordered_set<string> endset={endWord};
        if(worddic.count(endWord)==0)
            return 0;
        int res=1;
        for(;!beginset.empty();){
            res++;
            unordered_set<string> tmpset;
            for(auto s:beginset)//去重
                worddic.erase(s);
            for(string s:beginset){
                for(int i=s.size()-1;i>=0;i--){
                    string str=s;
                    for(char c='a';c<='z';c++){
                        str[i]=c;
                        if(worddic.count(str)==0)
                            continue;
                        if(endset.count(str)==1)
                            return res;
                        tmpset.insert(str);
                    }
                }
            }
            if(tmpset.size()<endset.size())
                beginset=tmpset;
            else{
                beginset=endset;
                endset=tmpset;
            }
        }
        return 0;
    }
};


【方法二】双端BFS+预处理（略复杂）
预处理：
在广搜时我们需要访问 Dug 的所有邻接点，我们可以先生成 Dug 的所有通用状态：

    Dug => *ug
    Dug => D*g
    Dug => Du*

第二个变换 D*g 可以同时映射到 Dog 或者 Dig，因为他们都有相同的通用状态。拥有相同的通用状态意味着两个单词只相差一个字母，他们的节点是相连的。

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        if(find(wordList.begin(),wordList.end(),endWord)==wordList.end())
            return 0;
        unordered_map<string,vector<string>> hashmap;
        unordered_set<string> topvisited{beginWord};
        unordered_set<string> bottomvisited{endWord};
        for(string s:wordList){
            int len=s.size();
            for(int i=0;i<len;i++){
                string tmp=s;
                tmp[i]='*';
                if(hashmap.count(tmp)==1){
                    hashmap[tmp].push_back(s);
                }
                else{
                    hashmap[tmp]={s};
                }
            }
        }
        queue<string> topbfs,bottombfs;
        topbfs.push(beginWord);
        bottombfs.push(endWord);
        int res=0,time=0;
        while(!topbfs.empty()&&!bottomvisited.empty()){
            time++;
            for(int i=topbfs.size();i>0;i--){
                string s=topbfs.front();
                topbfs.pop();
                for(int i=s.size()-1;i>=0;i--){
                    string tmp=s;
                    tmp[i]='*';
                    if(hashmap.count(tmp)==1){
                        for(int i=hashmap[tmp].size()-1;i>=0;i--){
                            if(topvisited.count(hashmap[tmp][i])==0){
                                if(bottomvisited.count(hashmap[tmp][i])){
                                    res=time*2;
                                    return res;
                                }
                                topvisited.insert(hashmap[tmp][i]);
                                topbfs.push(hashmap[tmp][i]);
                            }
                        }
                    }
                }
            }
            for(int i=bottombfs.size();i>0;i--){
                string s=bottombfs.front();
                bottombfs.pop();
                for(int i=s.size()-1;i>=0;i--){
                    string tmp=s;
                    tmp[i]='*';
                    if(hashmap.count(tmp)==1){
                        for(int i=hashmap[tmp].size()-1;i>=0;i--){
                            if(bottomvisited.count(hashmap[tmp][i])==0){
                                if(topvisited.count(hashmap[tmp][i])){
                                    res=time*2+1;
                                    return res;
                                }
                                bottomvisited.insert(hashmap[tmp][i]);
                                bottombfs.push(hashmap[tmp][i]);
                            }
                        }
                    }
                }
            }
        }
        return 0;
    }
};

【方法二】在方法一的基础上进行几步优化：
1.双端不一起搜索，而是每次都选择元素少的一端进行一次搜索；
2.不预处理，而是将每一元素位置替换为‘a’~'z' 间任意一元素，若替换后的新元素，在字典里，且没有用过，则放进新集合中。
3.用