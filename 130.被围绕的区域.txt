给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X

运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X

解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

【思路】DFS洪泛算法
边界上的 O 要特殊处理，只要把边界上的 O 特殊处理了，那么剩下的 O 替换成 X 就可以了。
class Solution {
public:
    int m,n;
    void solve(vector<vector<char>>& board) {
        if(board.empty())   return;
        int m=board.size(),n=board[0].size();
        this->m=m;
        this->n=n;
        for(int i=0;i<m;i++){
            if(board[i][0]=='O')
                fill(i,0,board);
            if(board[i][n-1]=='O')
                fill(i,n-1,board);
        }
        for(int i=0;i<n;i++){
            if(board[0][i]=='O')
                fill(0,i,board);
            if(board[m-1][i]=='O')
                fill(m-1,i,board);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='Y')
                    board[i][j]='O';
            }
        }
    }
    void fill(int x,int y,vector<vector<char>>& board){
        if(x<0||x>=m||y<0||y>=n||board[x][y]!='O')
            return;
        board[x][y]='Y';
        fill(x+1,y,board);
        fill(x-1,y,board);
        fill(x,y+1,board);
        fill(x,y-1,board);
    }
};