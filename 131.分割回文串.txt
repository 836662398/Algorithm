给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回 s 所有可能的分割方案。

示例:

输入: "aab"
输出:
[
  ["aa","b"],
  ["a","a","b"]
]

【方法一】回溯
class Solution {
public:
    vector<vector<string>> res;
    int len;
    string s;
    vector<vector<string>> partition(string s) {
        len=s.size();    
        this->s=s;
        backtrace(0,{});
        return res;
    }
    void backtrace(int index,vector<string> oneans){
        if(index==len){
            res.push_back(oneans);
            return;
        }
        for(int i=index;i<len;i++){
            if(isvalid(index,i)){
                oneans.push_back(s.substr(index,i-index+1));
                backtrace(i+1,oneans);
                oneans.pop_back();
            }
        }
    }
    bool isvalid(int left,int right){
        while(left<right){
            if(s[left]!=s[right])
                return false;
            left++;right--;
        }
        return true;
    }
};
【方法二】回溯+动态规划
在方法一的基础上，用动态规划判断是否为回文串。
dp[i][j]表示s[i……j]是否是回文串，
状态转移方程：
dp[i][j] = (s[i] == s[j]) ？ dp[i + 1][j - 1] ：0； （其中j>i+1）
class Solution {
public:
    vector<vector<string>> res;
    int len;
    string s;
    vector<vector<string>> partition(string s) {
        len=s.size();    
        this->s=s;
        vector<vector<int>> dp(len,vector<int>(len,0));
        for(int i=0;i<len;i++){
            dp[i][i]=1;
            if(i!=len-1&&s[i]==s[i+1])
                dp[i][i+1]=1;
        }
        for(int l=2;l<len;l++){
            for(int i=0;i+l<len;i++){
                if(s[i]==s[i+l]){
                    dp[i][i+l]=dp[i+1][i+l-1];
                }
            }
        }
        backtrace(0,{},dp);
        return res;
    }
    void backtrace(int index,vector<string> oneans,vector<vector<int>>& dp){
        if(index==len){
            res.push_back(oneans);
            return;
        }
        for(int i=index;i<len;i++){
            if(dp[index][i]){
                oneans.push_back(s.substr(index,i-index+1));
                backtrace(i+1,oneans,dp);
                oneans.pop_back();
            }
        }
    }
};