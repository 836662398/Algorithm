给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:
输入: [2,2,3,2]
输出: 3

示例 2:
输入: [0,1,0,1,0,1,99]
输出: 99

【方法一】
统计所有数字中每个位中1出现的总数，那么对于某个位，1出现的次数一定是3的倍数+1或0，
那么对这个数%3得到的结果就是目的数字在该位上的值
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int len=nums.size();
        int res=0;
        for(int i=0;i<32;i++){
            int time=0;
            for(int j=0;j<len;j++){
                if((nums[j]>>i)&1)
                    time++;
            }
            res|= ((time%3)<<i);
        }
        return res;
    }
};
【方法二】逻辑表达式（有限自动机状态机）
https://leetcode-cn.com/problems/single-number-ii/solution/luo-ji-dian-lu-jiao-du-xiang-xi-fen-xi-gai-ti-si-l/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int X=0,Y=0;
        for(int Z:nums){
            int Y_new=~X &(Y^Z);
            X=X&(~Y)&(~Z) | (~X)&Y&Z;
            Y=Y_new;
        }
        return Y;
    }
};
