运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。

进阶:
你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例:
LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得密钥 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得密钥 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4

【思路】哈希表+双向链表list
使用stl双向链表list，同时用存储对应节点迭代器的哈希表来实现O(1)查询。
因为从哈希表中删除尾结点时，需要知道尾结点对应的key，所以链表节点必须储存key。

struct Node {
    int key;
    int value;
};

class LRUCache {
    list<Node> ilist;
    using nodeIt = list<Node>::iterator;
    unordered_map<int, nodeIt> memo;
    int cap;

   public:
    LRUCache(int capacity) { cap = capacity; }

    int get(int key) {
        auto it = memo.find(key);
        if (it != memo.end()) {
            ilist.splice(ilist.begin(), ilist, it->second);
            return it->second->value;
        }
        return -1;
    }

    void put(int key, int value) {
        auto it = memo.find(key);
        if (it != memo.end()) {
            ilist.splice(ilist.begin(), ilist, it->second);
            it->second->value = value;
        } else {
            ilist.push_front({key, value});
            memo.insert({key, ilist.begin()});
            if (ilist.size() > cap) {
                memo.erase(ilist.back().key);
                ilist.pop_back();
            }
        }
    }
};


【方法二】
自己实现双向list，本质是环形链表+哨兵end()。

struct listNode {
    int key;
    int val;
    shared_ptr<listNode> pre;
    shared_ptr<listNode> next;
    listNode() {}
    listNode(int k, int v) : key(k), val(v) {}
};

using plistNode = shared_ptr<listNode>;
class List {
    plistNode end_;
    int size_ = 0;

   public:
    List() : end_(new listNode(INT_MAX, INT_MAX)) {
        end_->next = end_;
        end_->pre = end_;
    }
    int size() { return size_; }
    plistNode end() { return end_; }
    plistNode begin() { return end_->next; }
    plistNode backP() { return end_->pre; }
    void insert(plistNode node, plistNode pos) {
        auto p = pos->pre;
        p->next = node;
        node->pre = p;
        pos->pre = node;
        node->next = pos;
        size_++;
    }
    void erase(plistNode node) {
        assert(node != end_);
        auto p = node->pre;
        auto n = node->next;
        p->next = n;
        n->pre = p;
        size_--;
    }
    void push_back(plistNode node) { insert(node, end()); }
    void pop_back() { erase(backP()); }
    void push_front(plistNode node) { insert(node, begin()); }
    void pop_front() { erase(begin()); }
    void fresh(plistNode node) {
    	auto tmp = node;
        erase(node);
        push_front(tmp);
    }
};

class LRUCache {
    List ilist;
    unordered_map<int, plistNode> memo;
    int cap;

   public:
    LRUCache(int capacity) { cap = capacity; }
    int get(int key) {
        auto it = memo.find(key);
        if (it != memo.end()) {
            ilist.fresh(it->second);
            return it->second->val;
        }
        return -1;
    }

    void put(int key, int value) {
        auto it = memo.find(key);
        if (it != memo.end()) {
            ilist.fresh(it->second);
            it->second->val = value;
        } else {
            ilist.push_front(make_shared<listNode>(key, value));
            memo.insert({key, ilist.begin()});
            if (ilist.size() > cap) {
                memo.erase(ilist.backP()->key);
                ilist.pop_back();
            }
        }
    }
};

