给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

 

示例：

输入：nums = [-1,2,1,-4], target = 1
输出：2
解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。

 

提示：

    3 <= nums.length <= 10^3
    -10^3 <= nums[i] <= 10^3
    -10^4 <= target <= 10^4

【思路】双指针
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int len=nums.size();
        int res=nums[0]+nums[1]+nums[2];//随便取一个可能的值
        sort(nums.begin(),nums.end());
        for(int i=0;i<len-2;i++){
            int left=i+1,right=len-1;
            while(left<right){
                int sum=nums[left]+nums[right]+nums[i];
                if(sum<target)
                    left++;
                else if(sum>target)
                    right--;
                else if(sum==target)
                    return target;
                if(abs(sum-target)<abs(res-target))
                    res=sum;
            }
        }
        return res;
    }
};
【优化】去重
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int len=nums.size();
        int res=nums[0]+nums[1]+nums[2];
        sort(nums.begin(),nums.end());
        for(int i=0;i<len-2;i++){
            if(i!=0&&nums[i]==nums[i-1])
                continue;
            int tar=target-nums[i];
            int left=i+1,right=len-1;
            while(left<right){
                int sum=nums[left]+nums[right]+nums[i];
                if(abs(sum-target)<abs(res-target))
                    res=sum;
                if(sum<target){
                    left++;
                    while(left<right&&nums[left]==nums[left-1])//没有left<right的话可能越界
                        left++;
                }
                else if(sum>target){
                    right--;
                    while(left<right&&nums[right]==nums[right+1])
                        right--;
                }
                else if(sum==target)
                    return target;
            }
        }
        return res;
    }
};