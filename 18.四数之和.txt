给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

【思路】双指针
先固定前两个数，双重循环，然后再对这两个数右边的数进行双指针操作。
优化：a固定后，如果最大值比目标值小，说明后面越来越小的值根本没戏，忽略；
获取当前最小值，如果最小值比目标值大，说明后面越来越大的值根本没戏，直接break；
b同理。
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int a,b,c,d,len=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        for(int a=0;a<len-3;a++){
            if((a!=0&&nums[a]==nums[a-1]))//去重
                continue;
            int minsum=nums[a]+nums[a+1]+nums[a+2]+nums[a+3];
            if(minsum>target)
                break;
            int maxsum=nums[a]+nums[len-1]+nums[len-2]+nums[len-3];
            if(maxsum<target)
                continue;
            for(int b=a+1;b<len-2;b++){
                if((b!=a+1&&nums[b]==nums[b-1]))//去重
                    continue;
                int minsum=nums[a]+nums[b]+nums[b+1]+nums[b+2];
                if(minsum>target)
                    break;
                int maxsum=nums[a]+nums[b]+nums[len-1]+nums[len-2];
                if(maxsum<target)
                    continue;
                c=b+1,d=len-1;
                int sum=target-nums[a]-nums[b];
                while(c<d){
                    if(nums[c]+nums[d]<sum)
                        c++;
                    else if(nums[c]+nums[d]>sum)
                        d--;
                    else{
                        res.push_back({nums[a],nums[b],nums[c],nums[d]});
                        while(c<d &&nums[c]==nums[c+1]) ++c; //去重！
                        while(c<d&&nums[d]==nums[d-1])  --d;
                        ++c;--d;
                    }
                }
            }
        }
        return res;
    }
};