给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

示例 2:
输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

【思路】
具体分析同123.买卖股票的最佳时机III
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int len=prices.size();
        vector<int> dp_0(k+1,0);
        vector<int> dp_1(k+1,INT_MIN);
        for(int i=0;i<len;i++){
            for(int j=1;j<=k;j++){
                dp_0[j]=max(dp_0[j],dp_1[j]+prices[i]);
                dp_1[j]=max(dp_1[j],dp_0[j-1]-prices[i]);
            }
        }
        return dp_0[k];
    }
};//超时

【优化】如果k>=天数/2，则说明k>天数/2的时候既买出又卖出，没有收益，这些k可以省略，相当于k为正无穷。
所以可以在 k>天数/2 时进行优化：用贪心解决k为正无穷时候的情况。
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int len=prices.size();
        int max_profit = 0;
        if (k >= len / 2) {
            for (int i = 1; i < len; i++) {
                if (prices[i] > prices[i - 1]) {
                    max_profit += prices[i] - prices[i - 1];
                }
            }
            return max_profit;
        }
        vector<int> dp_0(k+1,0);
        vector<int> dp_1(k+1,INT_MIN);
        for(int i=0;i<len;i++){
            for(int j=1;j<=k;j++){
                dp_0[j]=max(dp_0[j],dp_1[j]+prices[i]);
                dp_1[j]=max(dp_1[j],dp_0[j-1]-prices[i]);
            }
        }
        return dp_0[k];
    }
};