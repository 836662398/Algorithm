你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]

给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？

示例 1:
输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。

示例 2:
输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。

【思路】拓扑排序 判断此课程安排图是否是 有向无环图(DAG)。
BFS实现拓扑排序：
1.统计课程安排图中每个节点的入度，生成 入度表 indegrees，和每个节点的后置节点 数组。
2.借助一个队列 queue，将所有入度为 0 的节点入队。
3.当 queue 非空时，依次将队首节点出队，在课程安排图中删除此节点 pre：
    并不是真正从邻接表中删除此节点 pre，而是将此节点对应所有邻接节点 cur 的入度 −1，即 indegrees[cur] -= 1。
    当入度 −1后邻接节点 cur 的入度为 0，说明 cur 所有的前驱节点已经被 “删除”，此时将 cur 入队。
4.在每次 pre 出队时，执行 numCourses--；
    若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为 000。
    因此，拓扑排序出队次数等于课程个数，返回 numCourses == 0 判断课程是否可以成功安排。
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> indegree(numCourses,0);//入度表
        vector<vector<int>> post(numCourses);//记录该节点指向的所有节点
        queue<int> myque;//入度为0 数 的队列
        for(auto p:prerequisites){
            indegree[p[0]]++;
            post[p[1]].push_back(p[0]);
        }
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0)
                myque.push(i);
        }
        while(!myque.empty()){
            int temp=myque.front();
            myque.pop();
            numCourses--;
            for(int num:post[temp]){
                indegree[num]--;
                if(indegree[num]==0)
                    myque.push(num);
            }
        }
        return numCourses==0;
    }
};

