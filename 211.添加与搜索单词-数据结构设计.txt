设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)

search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

说明:

你可以假设所有单词都是由小写字母 a-z 组成的。

【思路】前缀树
struct Node{
    Node *nexts[26]={nullptr};
    bool isEnd=false;
    ~Node(){
        for(int i=0;i<26;i++)
            delete nexts[i];
    }
};
class WordDictionary {
public:
    Node* root;
    WordDictionary() {
        root=new Node();
    }
    
    void addWord(string word) {
        Node* node=root;
        for(char c:word){
            if(!node->nexts[c-'a'])
                node->nexts[c-'a']=new Node();
            node=node->nexts[c-'a'];
        }
        node->isEnd=true;
    }
    
    bool search(string word) {
        return search(word,0,root);
    }
    bool search(string& word,int index,Node* root){
        if(index==word.size())
            return root->isEnd==true;
        Node* node=root;
        if(word[index]=='.'){
            for(int j=0;j<26;j++){
                if(node->nexts[j]&&search(word,index+1,node->nexts[j]) )
                    return true;
            }
            return false;
        }
        return node->nexts[word[index]-'a']&&search(word,index+1,node->nexts[word[index]-'a']);
    }
};