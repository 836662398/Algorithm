城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）。

Buildings Skyline Contour

每个建筑物的几何信息用三元组 [Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第 i 座建筑物左右边缘的 x 坐标，Hi 是其高度。可以保证 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX 和 Ri - Li > 0。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。

例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] 。

输出是以 [ [x1,y1], [x2, y2], [x3, y3], ... ] 格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。

例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]。

说明:

    任何输入列表中的建筑物数量保证在 [0, 10000] 范围内。
    输入列表已经按左 x 坐标 Li  进行升序排列。
    输出列表必须按 x 位排序。
    输出天际线中不得有连续的相同高度的水平线。例如 [...[2 3], [4 5], [7 5], [11 5], [12 7]...] 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：[...[2 3], [4 5], [12 7], ...]

【思路】扫描线
用数组记录每个建筑左右边界以及其高度，遍历该数组相当于使用扫描线，从左至右扫描。

如果遇到左端点，将高度入multiset，如果遇到右端点，则将高度从multiset中删除（需要删除非端点值，所以不能使用堆）。

利用multiset的自动排序和快速删除，能够在扫描到每一个边界时，快速找到最高高度。

如果该最大值和last变量记录的上一个高度不相同，则需要将该转折点加入结果集。

class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        using PII=pair<int,int>;
        vector<PII> border;                             //记录左右边界
        vector<vector<int>> res;
        //记录每个建筑的两个边界:{边界下标,高度}，我们用负高度值来表示左边界的高度
        for(auto vec:buildings){
            border.push_back({vec[0],-vec[2]});
            border.push_back({vec[1],vec[2]});
        }
        sort(border.begin(),border.end());              //按边界下标排序
        int last=0;                                     //记录上一次写入结果的最高高度
        multiset<int> height={0};                       //利用multiset的自动排序、快速删除，用0保底应对建筑之间的间隙
        for(PII p:border){
            if(p.second<0)  height.insert(-p.second);   //左端点，高度加入
            else    height.erase(height.find(p.second));//右端点，高度删除，删除迭代器，删除值得话会将所有值都删除
            int maxheight=*height.rbegin();             //当前最大高度
            if(maxheight!=last){                        //当前最大高度不等于上一个高度last表示这是一个转折点
                res.push_back({p.first,maxheight});
                last=maxheight;
            }  
        }
        return res;
    }
};