在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:
输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4


【方法一】单调栈+动态规划
最大矩阵的方法在求面积时稍微变化一下，时间O(mn*n)
class Solution {
public:
    int res=0;
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())  return 0;
        vector<int> height(matrix[0].size()+2,0);
        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<matrix[0].size();j++){
                height[j+1]= matrix[i][j]=='0'? 0:height[j+1]+1;
            }
            area(height);
        }
        return res;
    }
    void area(vector<int>& height){
        stack<int> mysta;
        for(int i=0;i<height.size();i++){
            while(!mysta.empty()&&height[i]<height[mysta.top()]){
                int peek=mysta.top();
                mysta.pop();
                int distance=i-mysta.top()-1;
                int area=min(distance,height[peek]) * min(distance,height[peek]) ;
                res=max(res,area);
            }
            mysta.push(i);
        }
    }
};
【方法二】动态规划
我们用 dp(i,j) 表示以 (i,j)为右下角，且只包含 1 的正方形的边长最大值。

那么如何计算 dp 中的每个元素值呢？对于每个位置 (i,j)，检查在矩阵中该位置的值：

    如果该位置的值是 0，则 dp(i,j)=0。

    如果该位置的值是 1，则 dp(i,j)的值由其上方、左方和左上方的三个相邻位置的 dp 值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加 1，状态转移方程如下：

    dp(i,j)=min(dp(i−1,j),dp(i−1,j−1),dp(i,j−1))+1

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())  return 0;
        int maxlen=0,hei=matrix.size(),len=matrix[0].size();
        vector<int> dp(len,0);
        for(int i=0;i<hei;i++){
            vector<int> tmp(len,0);
            for(int j=0;j<len;j++){
                if(matrix[i][j]=='1'){
                    if(i==0||j==0)
                        tmp[j]=1;
                    else
                        tmp[j]=min({tmp[j-1],dp[j],dp[j-1]})+1;
                    maxlen=max(maxlen,tmp[j]);
                }
            }
            dp=tmp;
        }
        return maxlen*maxlen;
    }
};