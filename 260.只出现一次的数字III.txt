给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]

注意：

    结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
    你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？

【方法】位运算
使用异或运算可以帮助我们消除出现两次的数字；我们计算 bitmask ^= x，则 bitmask 留下的就是出现奇数次的位。
x & (-x) 可以保留位中最右边的1 ，且将其余的 1 设位 0 的方法。
用x & (-x) 可以把数组分成两个子数组，一个子数组中元素的这一位为1，另一组中元素这一位全为0，两部分分别求异或和，结果就是这两个数。

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int XORsum=0,div=0;
        for(int num:nums)
            XORsum^=num;
        div=XORsum&(-XORsum);
        int a=0,b=0;
        for(int num:nums){
            if(div&num)
                a^=num;
            else
                b^=num;
        }
        return {a,b};
    }
};