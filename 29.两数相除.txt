给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

返回被除数 dividend 除以除数 divisor 得到的商。

整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2

示例 1:
输入: dividend = 10, divisor = 3
输出: 3
解释: 10/3 = truncate(3.33333..) = truncate(3) = 3

示例 2:
输入: dividend = 7, divisor = -3
输出: -2
解释: 7/-3 = truncate(-2.33333..) = -2

提示：

    被除数和除数均为 32 位有符号整数。
    除数不为 0。
    假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。

【思路】
越界问题对除数是1和-1单独讨论
用减法代替除法，用倍增加速。
举例：11 除以 3 
首先11比3大，结果至少是1， 然后我让3翻倍，就是6，发现11比3翻倍后还要大，那么结果就至少是2了，
如果6再翻倍，就超出了11，所以用11-6=5，对5重复进行上述计算，直到被除数小于除数，可以直接当做0.。

class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend == 0) return 0;
        if(divisor == 1) return dividend;
        if(divisor == -1){
            if(dividend>INT_MIN) return -dividend;// 只要不是最小的那个整数，都是直接返回相反数就好啦
            return INT_MAX;// 是最小的那个，那就返回最大的整数啦
        }
        bool sign=true;
        if((dividend^divisor)<0)  sign=false;////用异或来判断符号是否相异
        if(dividend>0)  dividend=-dividend;//为了防止正数溢出，全部转变成负数进行处理
        if(divisor>0)   divisor=-divisor;//-a=0-a，不算乘法
        int res=div(dividend,divisor);
        return sign?res:-res;
    }
    int div(int dividend,int divisor){
        if(dividend>divisor)    return 0;
        int cnt=1;
        int tmp=divisor;
        while(tmp>(INT_MIN>>2)&& tmp+tmp>=dividend ){//防止溢出
            cnt+=cnt;
            tmp+=tmp;
        }
        return div(dividend-tmp,divisor)+cnt;
    }
};