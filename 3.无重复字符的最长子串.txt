给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

【方法一】双指针+哈希表
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.size();
        unordered_set<int> hashset;
        int left=0,right=0;
        int res=0;
        while(right< len){
            while(hashset.find(s[right])!=hashset.end()){
                hashset.erase(s[left]);
                left++;
            }
            res=max(res,right-left+1);
            hashset.insert(s[right++]);
        }
        return res;
    }
};

【方法二】桶优化：数组代替哈希表
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.size();
        vector<int> bucket(128,0);
        int left=0,right=0;
        int res=0;
        while(right< len){
            while(bucket[ s[right] ]!=0){
                bucket[ s[left] ]--;
                left++;
            }
            res=max(res,right-left+1);
            bucket[ s[right] ]++;
            right++;
        }
        return res;
    }
};
