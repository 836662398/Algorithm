给你一个仅包含小写字母的字符串，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证返回结果的字典序最小（要求不能打乱其他字符的相对位置）。

示例 1:

输入: "bcabc"
输出: "abc"

示例 2:

输入: "cbacdcbc"
输出: "acdb"

【方法一】贪心+递归
在保证其他字符至少出现一次的前提下，确定最小左侧字符， 之后再将未处理的后缀字符串继续递归。
得到序列字典序必然最小。
每次递归O(n)时间，但最多进行26次递归，所以仍然是O(n)复杂度。

class Solution {
public:
    string removeDuplicateLetters(string s) {
        if(s=="")   return "";
        int cnt[26]={0};
        int n=s.size(),pos=0;
        for(char c:s)   cnt[c-'a']++;
        for(int i=0;i<n;i++){
            if(s[i]<s[pos]) pos=i;
            if(--cnt[s[i]-'a']==0) break;
        }
        char c=s[pos];
        s=s.substr(pos+1);
        s.erase(remove(s.begin(), s.end(), c), s.end());//删除该字符
        return c+removeDuplicateLetters(s);
    }
};

【方法二】最优解：贪心+栈
用栈来存储最终返回的字符串，并维持字符串的最小字典序。
每遇到一个字符，如果这个字符不存在于栈中，就需要将该字符压入栈中。
但在压入之前，需要先将之后还会出现，并且字典序比当前字符小的栈顶字符(可能有多个)移除，然后再将当前字符压入。
class Solution {
public:
    string removeDuplicateLetters(string s) {
        int cnt[26]={0};
        bool have[26]={0};
        int n=s.size();
        for(char c:s)   cnt[c-'a']++;
        string res;
        for(char c:s){
            cnt[c-'a']--;
            if(have[c-'a']) continue; 
            while(res.size() && c<res.back()&&cnt[res.back()-'a']>0){
                have[res.back()-'a']=0;
                res.pop_back();
            }
            res.push_back(c);
            have[c-'a']=1;
        }
        return res;
    }
};

