给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:
输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"

示例 2:
输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"

【方法一】线性规划
们用 dp[i] 表示以 i 结尾的最长有效括号；

    当 s[i] 为 (,dp[i] 必然等于 0，因为不可能组成有效的括号；

    那么 s[i] 为 )

    2.1 当 s[i-1] 为 (，那么 dp[i] = dp[i-2] + 2；

    2.2 当 s[i-1] 为 ) 并且 s[i-dp[i-1] - 1] 为 (，那么 dp[i] = dp[i-1] + 2 + dp[i-dp[i-1]-2]；
class Solution {
public:
    int longestValidParentheses(string s) {
        int len=s.size(),res=0;
        vector<int> dp(len);
        for(int i=1;i<len;i++){
            if( s[i]==')'){
                if(s[i-1]=='(')
                    dp[i]=2+ (i-2>=0? dp[i-2]:0);
                else{
                    if(i-dp[i-1]-1>=0&&s[i-dp[i-1]-1]=='(' )
                        dp[i]=2+dp[i-1]+  ( i-dp[i-1]-2>=0 ?dp[i-dp[i-1]-2]:0);    
                }
                res=max(res,dp[i]);
            }
        }
        return res;
    }
};
【方法二】栈
我们用一个栈来存储坐标。为了方便计算，在最开始的时候，我们将栈里面放入一个-1.
当遇到的是'('的时候，我们将其坐标入栈，
当遇到的是'）'的时候，弹出栈顶元素。此时需要分两种情况。
此时如果栈空了，其实相当于前面已经正好匹配了，然后再进来了一个'）',此时无需更新最大值max，
只需将当前坐标入栈。其作用和上面栈初始化的时候放入一个-1相同。
如果此时栈非空，说明又多了一对匹配。需要更新max的值。
class Solution {
public:
    int longestValidParentheses(string s) {
        int len=s.size(),res=0;
        stack<int> mysta;
        mysta.push(-1);
        for(int i=0;i<len;i++){
            if(s[i]=='(')
                mysta.push(i);
            else{
                mysta.pop();
                if(!mysta.empty())
                    res=max(res,i-mysta.top());
                else
                    mysta.push(i);
            }
        }
        return res;
    }
};

【方法三】计数器
从左到右扫描，用两个变量 left 和 right 保存的当前的左括号和右括号的个数，都初始化为 0 。

    如果左括号个数等于右括号个数了，那么就更新合法序列的最长长度。
    如果左括号个数大于右括号个数了，那么就接着向右边扫描。
    如果左括号数目小于右括号个数了，那么后边无论是什么，此时都不可能是合法序列了，此时 left 和 right 归 0，然后接着扫描。

从左到右扫描完毕后，同样的方法从右到左再来一次，因为类似这样的情况 ( ( ( ) ) ，如果从左到右扫描到最后，left = 3，right = 2，期间不会出现 left == right。但是如果从右向左扫描，扫描到倒数第二个位置的时候，就会出现 left = 2，right = 2 ，就会得到一种合法序列。

public class Solution {
    public int longestValidParentheses(String s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * right);
            } else if (right >= left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * left);
            } else if (left >= right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
}



