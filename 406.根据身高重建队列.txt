406. 根据身高重建队列

假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。

注意：
总人数少于1100人。

示例

输入:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

输出:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

【方法一】
排序，然后插入。

假设候选队列为 A，已经站好队的队列为 B.

从 A 里挑身高最高的人 x 出来，插入到 B. 因为 B 中每个人的身高都比 x 要高，因此 x 插入的位置，就是看 x 前面应该有多少人就行了。比如 x 前面有 5 个人，那 x 就插入到队列 B 的第 5 个位置。

class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(),people.end(),[](const vector<int>&a,const vector<int>&b){return a[0]>b[0]||(a[0]==b[0]&&a[1]<b[1]);});
        int len=people.size();
        vector<vector<int>> res;
        for(int i=0;i<len;i++)
            res.insert(res.begin()+people[i][1],people[i]);
        return res;
    }
};

【方法二】在结果的对应位置上，先放上小的，再放上大的。
class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(),people.end(),[](const vector<int>&a,const vector<int>&b){return a[0]<b[0]||(a[0]==b[0]&&a[1]>b[1]);});
        int len=people.size();
        vector<int> order(len);
        vector<vector<int>> res(len);
        for(int i=0;i<len;i++)
            order[i]=i;
        for(int i=0;i<len;i++){
            int location=people[i][1];
            res[order[location]]=people[i];
            order.erase(order.begin()+location);
        }
        return res;
    }
};