请你实现一个数据结构支持以下操作：

    Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。
    Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否则使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。
    GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串"" 。
    GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串""。

挑战：

你能够以 O(1) 的时间复杂度实现所有操作吗？

【思路】
分析题意可知：

    1.在O(1)时间内查询(inc和dec均需要查询)，那么哈希表是一个很好的选择。
    2.在O(1)时间内得到最大值和最小值，这说明最大值和最小值是可以直接获得的，即结构本身有序。
    3.在O(1)时间内修改，这里可以说明常用的有序数据结构如std::map均不能使用。倘若使用数组来处理，
      而数组的插入删除复杂度是O(N)的。但是可以注意到插入和删除都是在key的值为1时发生，即有序结构的最左端。
      而修改也仅是+1或者-1也仅是对相邻元素处理，因此考虑使用有序双向链表来存储数据。
    4.考虑到可能会出现多个value是相同的值，那么一个元素自增或自减可能要“越过”这些相同的元素
      (因为它们在有序链表是相邻的)，则修改的复杂度会退化为O(N)，因此这里需要用一个节点存储所有相同的value。
      相同的value之间没有要求，所以不需要用LFU的链表，哈希表即可。

struct Node {
    int val;
    unordered_set<string> strTable;
    Node(int x) : val(x) {}
};
class AllOne {
   public:
    list<Node> ilist;
    unordered_map<string, list<Node>::iterator> keyToNode;
    AllOne() {}

    /** Inserts a new key <Key> with value 1. Or increments an existing key
     * by 1. */
    void inc(string key) {
        auto ite = keyToNode.find(key);
        if (ite == keyToNode.end()) {
            auto newNode = ilist.begin();
            if (ilist.empty() || ilist.begin()->val != 1)
                newNode = ilist.emplace(newNode, 1);
            newNode->strTable.insert(key);
            keyToNode[key] = newNode;
        } else {
            auto oldNode = ite->second;
            auto newNode = next(oldNode, 1);
            oldNode->strTable.erase(key);
            int oldVal = oldNode->val;
            if (newNode == ilist.end() || newNode->val != oldVal + 1)
                newNode = ilist.emplace(newNode, oldVal + 1);
            keyToNode[key] = newNode;
            newNode->strTable.insert(key);
            if (oldNode->strTable.empty())
                ilist.erase(oldNode);
        }
    }

    /** Decrements an existing key by 1. If Key's value is 1, remove it from the
     * data structure. */
    void dec(string key) {
        auto ite = keyToNode.find(key);
        if (ite == keyToNode.end()) return;
        auto oldNode = ite->second;

        int oldVal = oldNode->val;
        if (oldVal != 1) {
            auto newNode = prev(oldNode, 1);
            if (oldNode == ilist.begin() || newNode->val != oldVal - 1)
                newNode = ilist.emplace(oldNode, oldVal - 1);
            keyToNode[key] = newNode;
            newNode->strTable.insert(key);
        } else
            keyToNode.erase(key);

        oldNode->strTable.erase(key);
        if (oldNode->strTable.empty())
            ilist.erase(oldNode);
    }

    /** Returns one of the keys with maximal value. */
    string getMaxKey() {
        if (ilist.empty())  return "";
        return *ilist.rbegin()->strTable.begin();
    }

    /** Returns one of the keys with Minimal value. */
    string getMinKey() {
        if (ilist.empty())  return "";
        return *ilist.begin()->strTable.begin();
    }
};

