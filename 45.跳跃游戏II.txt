给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:
输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

说明:
假设你总是可以到达数组的最后一个位置。

【思路】贪心
每一次跳跃，都有一个范围，该范围内每一所有位置都能达到。

所以可以找到该次跳跃能达到的最远距离，通过这个范围区间，能找到下一次跳跃能到达的最远距离。

每次都找最远距离，到达终点时，得到的跳跃次数最短。

我们维护当前能够到达的最大下标位置，记为边界。我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加 1。

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        int right=0,res=0,nextRight=0;
        for(int i=0;i<n-1;i++){//不访问最后一个元素，因为到达即可
            if(nums[i]+i>nextRight)
                nextRight=nums[i]+i;
            if(i==right){
                res++;
                right=nextRight;
            }
        }
        return res;
    }
};

