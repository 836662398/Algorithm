请你为 最不经常使用（LFU）缓存算法设计并实现数据结构。它应该支持以下操作：get 和 put。

    get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。
    put(key, value) - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除最久未使用的键。

「项的使用次数」就是自插入该项以来对其调用 get 和 put 函数的次数之和。使用次数会在对应项被移除后置为 0 。

进阶：
你是否可以在 O(1) 时间复杂度内执行两项操作？

示例：

LFUCache cache = new LFUCache( 2 /* capacity (缓存容量) */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回 1
cache.put(3, 3);    // 去除 key 2
cache.get(2);       // 返回 -1 (未找到key 2)
cache.get(3);       // 返回 3
cache.put(4, 4);    // 去除 key 1
cache.get(1);       // 返回 -1 (未找到 key 1)
cache.get(3);       // 返回 3
cache.get(4);       // 返回 4

【思路】双哈希表+双向链表
用节点存储键值、值、频率。
相同频率的节点在同一个链表上。
双哈希表实现O(1)：keyTable表记录每个键值对应的在链表中的节点，listOfEachFre表记录每个频率对应的链表。

struct Node{
    int key,val,fre;
    Node(int _key,int _val,int _fre):key(_key),val(_val),fre(_fre){}
};
class LFUCache {
public:
    int capacity,minFre;//minFre用来记录尾部链表（包含最久未使用的键）
    unordered_map<int,list<Node>::iterator> keyTable;//每个键值对应节点
    unordered_map<int,list<Node>> listOfEachFre;//每个频率对应的链表

    LFUCache(int capacity) {
        this->capacity=capacity;
    }
    
    int get(int key) {
        if(!capacity || !keyTable.count(key))
            return -1;
        int fre=keyTable[key]->fre,val=keyTable[key]->val;
        moveNode(key,val,fre);
        return val;
    }
    
    void put(int key, int value) {
        if(!capacity)   return;
        if(keyTable.count(key)==0){
            if(keyTable.size()==capacity){
                keyTable.erase(listOfEachFre[minFre].back().key);
                listOfEachFre[minFre].pop_back();
                if(listOfEachFre[minFre].size()==0){
                    listOfEachFre.erase(minFre);
                }
            }
            listOfEachFre[1].push_front(Node(key,value,1));
            keyTable[key]=listOfEachFre[1].begin();
            minFre=1;
        }
        else{
            moveNode(key,value,keyTable[key]->fre);
        }
    }

    void moveNode(int key,int val,int fre){//访问节点过后将其置于对应新链表头部
        auto node=keyTable[key];
        listOfEachFre[fre].erase(node);
        if(listOfEachFre[fre].size()==0){
            listOfEachFre.erase(fre);
            if(minFre==fre)    
                minFre++;
        }
        listOfEachFre[fre+1].push_front(Node(key,val,fre+1));
        keyTable[key]=listOfEachFre[fre+1].begin();
    }
};
