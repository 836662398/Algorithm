请你为 最不经常使用（LFU）缓存算法设计并实现数据结构。它应该支持以下操作：get 和 put。

    get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。
    put(key, value) - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除最久未使用的键。

「项的使用次数」就是自插入该项以来对其调用 get 和 put 函数的次数之和。使用次数会在对应项被移除后置为 0 。

进阶：
你是否可以在 O(1) 时间复杂度内执行两项操作？

示例：

LFUCache cache = new LFUCache( 2 /* capacity (缓存容量) */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回 1
cache.put(3, 3);    // 去除 key 2
cache.get(2);       // 返回 -1 (未找到key 2)
cache.get(3);       // 返回 3
cache.put(4, 4);    // 去除 key 1
cache.get(1);       // 返回 -1 (未找到 key 1)
cache.get(3);       // 返回 3
cache.get(4);       // 返回 4

【思路】双哈希表+双向链表
用节点Node存储键值、值、频率。
相同频率的节点在同一个链表上。
双哈希表实现O(1)：keyMemo表记录每个键值对应的在链表中的节点，freMemo表记录每个频率对应的链表。
[Tip]put()可以复用get()。

struct Node {
    int key;
    int val;
    int fre;
};

class LFUCache {
    using NodeList = list<Node>;
    using NodeIt = list<Node>::iterator;
    unordered_map<int, NodeList> freMemo;
    unordered_map<int, NodeIt> keyMemo;
    int cap;
    int minFre = 0;

   public:
    LFUCache(int capacity) { cap = capacity; }

    int get(int key) {
        auto keyIt = keyMemo.find(key);
        if (!cap || keyIt == keyMemo.end())
            return -1;
        NodeIt it = keyIt->second;
        auto& newList = freMemo[it->fre + 1];	//bug:必须引用语意，不能值语意。
        newList.splice(newList.begin(), freMemo[it->fre], it);
        if (!freMemo[it->fre].size()) {
            freMemo.erase(it->fre);
            if (minFre == it->fre)
                minFre++;
        }
        it->fre++;
        return it->val;
    }

    void put(int key, int value) {
        if (!cap)
            return;
        auto keyIt = keyMemo.find(key);
        if (keyIt != keyMemo.end()) {
            keyIt->second->val = value;
            get(key);
        } else {
            if (keyMemo.size() == cap) {
                auto tmp = freMemo[minFre].back().key;
                keyMemo.erase(freMemo[minFre].back().key);
                freMemo[minFre].pop_back();
                if (freMemo[minFre].size() == 0)
                    freMemo.erase(minFre);
            }
            freMemo[1].push_front({key, value, 1});
            keyMemo[key] = freMemo[1].begin();
            minFre = 1;
        }
    }
};