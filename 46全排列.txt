给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


方法一：从原函数中一个一个加入新数组，选择一个元素后就删除该元素，回溯完再加上。
class Solution {
public:
    vector<int> ans;
    vector<vector<int>> res;
    vector<vector<int>> permute(vector<int>& nums) {
        helper(nums);
        return res;
    }
    void helper(vector<int>& nums){
        int len=nums.size();
        if(len==0){
            res.push_back(ans);
        }
        for(int i=0;i<len;i++){
            int temp=nums[i];
            ans.push_back(temp);
            nums.erase(nums.begin()+i);
            helper(nums);
            nums.insert(nums.begin()+i,temp);
            ans.pop_back();
        }
    }
};

方法二：用交换代替方法一中的选择，将题目给定的 n个数的数组 nums[]用index划分成左右两个部分，左边的表示已经填过的数，右边表示待填的数，我们在递归搜索的时候只搜索index右边的数。
class Solution {
public:
    vector<int> ans;
    vector<vector<int>> res;
    vector<vector<int>> permute(vector<int>& nums) {
        helper(nums,0);
        return res;
    }
    void helper(vector<int>& nums,int index){
        int len=nums.size();
        if(len==index){
            res.push_back(nums);
        }
        for(int i=index;i<len;i++){
            swap(nums[index],nums[i]);
            helper(nums,index+1);
            swap(nums[index],nums[i]);
        }
    }
};

方法三：stl函数
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        int len=nums.size(),time=1;
        for(int i=1;i<=len;i++)
            time*=i;
        for(int i=0;i<time;i++){
            next_permutation(nums.begin(),nums.end());
            res.push_back(nums);
        }
        return res;
    }
};