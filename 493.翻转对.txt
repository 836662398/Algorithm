给定一个数组 nums ，如果 i < j 且 nums[i] > 2*nums[j] 我们就将 (i, j) 称作一个重要翻转对。

你需要返回给定数组中的重要翻转对的数量。

示例 1:

输入: [1,3,2,3,1]
输出: 2

示例 2:

输入: [2,4,3,5,1]
输出: 3

注意:

    给定数组的长度不会超过50000。
    输入数组中的所有数字都在32位整数的表示范围内。

【思路】类似逆序对
【方法一】分治、归并排序
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        if(nums.empty())    return 0;
        return mergeSort(nums,0,nums.size()-1);
    }
    int mergeSort(vector<int>& nums,int left,int right){
        if(left==right)    return 0;
        int mid=(left+right)/2;
        int cnt=mergeSort(nums,left,mid)+mergeSort(nums,mid+1,right);   
        int l=left,r=mid+1;
        while(l<=mid && r<=right){
            if(nums[l]>2LL*nums[r]){
                r++;
                cnt+=mid-l+1;
            }
            else
                l++;
        }
        inplace_merge(nums.begin() + left, nums.begin() + mid + 1, nums.begin() + right + 1);
        return cnt;
    }
};
【方法二】树状数组
在此处涉及到*2后再比较，不能直接离散化，所以在排序过后的数组使用二分搜索来间接离散。
void update(vector<int>& BIT, int index, int val)
{
    while (index > 0) {
        BIT[index] += val;
        index -= index & (-index);
    }
}

int query(vector<int>& BIT, int index)
{
    int sum = 0;
    while (index < BIT.size()) {
        sum += BIT[index];
        index += index & (-index);
    }
    return sum;
}
int reversePairs(vector<int>& nums)
{
    int n = nums.size();
    vector<int> nums_copy(nums);

    sort(nums_copy.begin(), nums_copy.end());

    vector<int> BITS(n + 1, 0);
    int count = 0;
    for (int i = 0; i < n; i++) {
        count += query(BITS, lower_bound(nums_copy.begin(), nums_copy.end(), 2LL * nums[i] + 1) - nums_copy.begin() + 1);
        update(BITS, lower_bound(nums_copy.begin(), nums_copy.end(), nums[i]) - nums_copy.begin() + 1, 1);
    }
    return count;
}

