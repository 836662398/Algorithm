给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1

 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7

【方法一】BFS层次遍历
用res记录每一层第一个元素
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int res=root->val;
        queue<TreeNode*> bfsque;
        bfsque.push(root);
        while(!bfsque.empty()){
            res=bfsque.front()->val;//记录每一层第一个元素
            for(int i=bfsque.size();i>0;i--){
                TreeNode* tmp=bfsque.front();
                bfsque.pop();
                if(tmp->left)   bfsque.push(tmp->left);
                if(tmp->right)  bfsque.push(tmp->right);
            }
        }
        return res;
    }
};
【方法二】dfs
class Solution {
public:
    int maxdepth=-1;
    int res=0;
    int findBottomLeftValue(TreeNode* root) {
        dfs(root,0);
        return res;
    }
    void dfs(TreeNode* root, int depth){
        if(!root)   return;
        if(depth>maxdepth){
            res=root->val;
            maxdepth=depth;
        }
        dfs(root->left,depth+1);
        dfs(root->right,depth+1);
    }
};
