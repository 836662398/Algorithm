给定一个包含非负数的数组和一个目标整数 k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。

示例 1:
输入: [23,2,4,6,7], k = 6
输出: True
解释: [2,4] 是一个大小为 2 的子数组，并且和为 6。

示例 2:
输入: [23,2,6,4,7], k = 6
输出: True
解释: [23,2,6,4,7]是大小为 5 的子数组，并且和为 42。

说明:
    数组的长度不会超过10,000。
    你可以认为所有数字总和在 32 位有符号整数范围内。

【方法一】前缀和，O（n²）复杂度
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int len=nums.size();
        if(len<2)    return false;
        vector<int> dp(len,0);
        dp[0]=nums[0];
        for(int i=1;i<len;i++){
            dp[i]=dp[i-1]+nums[i];
            for(int j=0;j<i;j++){
                if(k==dp[i]-dp[j]+nums[j]||k!=0&&(dp[i]-dp[j]+nums[j])%k==0) //注意k为0的情况
                    return true;
            }
        }
        return false;
    }
};
【方法二】哈希表，O(n)时间复杂度
用哈希表存储 前缀和除以k 的余数，下次再遇到已存在的余数，说明这俩索引之间的子数组和为k的倍数，
特殊处理k=0的情况，此时不需要记录余数，记录前缀和即可。
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int len=nums.size();
        if(len<2)    return false;
        unordered_map<int,int> modmap;
        modmap[0]=-1;
        int sum=0;
        for(int i=0;i<len;i++){
            sum+=nums[i];
            if(k!=0)
                sum=sum%k;
            if(modmap.count(sum)!=0&&i-modmap[sum]>1)
                return true;
            else if(modmap.count(sum)==0)
                modmap[sum]=i;
        }
        return false;
    }
};