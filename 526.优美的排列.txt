假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 <= i <= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：

    第 i 位的数字能被 i 整除
    i 能被第 i 位上的数字整除

现在给定一个整数 N，请问可以构造多少个优美的排列？

示例1:
输入: 2
输出: 2
解释: 
第 1 个优美的排列是 [1, 2]:
  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除
  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除

第 2 个优美的排列是 [2, 1]:
  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除
  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除

说明:
    N 是一个正整数，并且不会超过15。

【方法一】回溯
class Solution {
public:
    int res=0,n;
    int countArrangement(int N) {
        n=N;
        backtrack(1,0);
        return res;
    }
    void backtrack(int index,int status){
        if(index==n+1){
            res++;
            return;
        }
        for(int i=1;i<=n;i++){
            if(index%i!=0 && i%index!=0 || (status & 1<<i ))    continue;
            int tmp=status | 1<<i;
            backtrack(index+1,tmp);
        }
    }
};
【方法二】状压DP
状态s表示放置状态，
比如二进制数010101，第1,3,5位是1，一共3个1，所以表示1,3,5以任意顺序放在数组前3位。
dp[s]表示状态为s时，满足条件的排列数量。
转移方程：
对于二进制中为0的位，判断是否可以作为下一个放入数组中的数，若是则更新dp[n | (1 << j)] += dp[n]。
class Solution {
public:
    int countArrangement(int N) {
        int m=(1<<N)-1;
        vector<int> dp(m+1);
        for(int i=0;i<m;i++){
            int n= bitset<32>(i).count();
            for(int j=0;j<N;j++){
                if(1<<j & i || (j+1)%(n+1)!=0 &&(n+1)%(j+1)!=0 )    continue;
                dp[i | 1<<j]+=dp[i];
            }
        }
        return dp[m];
    }
};