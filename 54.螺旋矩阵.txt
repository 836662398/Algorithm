给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。

示例 1:

输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
输出: [1,2,3,6,9,8,7,4,5]

示例 2:

输入:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
输出: [1,2,3,4,8,12,11,10,9,5,6,7]

【思路】按层模拟
每层求出左上和右下坐标，超出坐标范围说明需要转向；
遇到起始坐标时，进入下一层。
class Solution {
   public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty())
            return {};
        int m = matrix.size(), n = matrix[0].size(), cnt = m * n;
        int maxc = min((m + 1) / 2, (n + 1) / 2);	//最大的层数
        int dirs[5] = {0, 1, 0, -1, 0};
        vector<int> res;
        for (int i = 0; i < maxc; i++) {
            int row = i, col = i;
            int maxRow = m - i - 1, maxCol = n - i - 1;
            int idx = 0;
            do {
                res.push_back(matrix[row][col]);
                cnt--;
                if (row + dirs[idx] < i || col + dirs[idx + 1] < i ||
                    row + dirs[idx] > maxRow || col + dirs[idx + 1] > maxCol) {
                    idx = (idx + 1) % 4;
                }
                row += dirs[idx];
                col += dirs[idx + 1];
            } while (!(row == i && col == i) && cnt);
        }
        return res;
    }
};