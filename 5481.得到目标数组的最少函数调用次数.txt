函数：
俩操作二选一：
1.将某元素+1
2.将所有元素*2

给你一个与 nums 大小相同且初始值全为 0 的数组 arr ，请你调用以上函数得到整数数组 nums 。

请你返回将 arr 变成 nums 的最少函数调用次数。

答案保证在 32 位有符号整数以内。
示例 1：
输入：nums = [1,5]
输出：5
解释：给第二个数加 1 ：[0, 0] 变成 [0, 1] （1 次操作）。
将所有数字乘以 2 ：[0, 1] -> [0, 2] -> [0, 4] （2 次操作）。
给两个数字都加 1 ：[0, 4] -> [1, 4] -> [1, 5] （2 次操作）。
总操作次数为：1 + 2 + 2 = 5 。

示例 2：
输入：nums = [2,2]
输出：3
解释：给两个数字都加 1 ：[0, 0] -> [0, 1] -> [1, 1] （2 次操作）。
将所有数字乘以 2 ： [1, 1] -> [2, 2] （1 次操作）。
总操作次数为： 2 + 1 = 3 。

示例 3：
输入：nums = [4,2,5]
输出：6
解释：（初始）[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5] （nums 数组）。

示例 4：
输入：nums = [3,2,2,4]
输出：7

示例 5：
输入：nums = [2,4,8,16]
输出：8

提示：
    1 <= nums.length <= 10^5
    0 <= nums[i] <= 10^9

【思路】
将所有数看做二进制，
所有元素二进制的1的个数总和，就是需要+1的次数；
最大的元素的二进制位数的长度（最长），就是需要*2的次数：
因为比他小的元素必定可通过比他少几次*2（慢）来获得。

class Solution {
public:
    int minOperations(vector<int>& nums) {
        int res=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
            res+=bitset<32>(nums[i]).count();
        int maxele=*max_element(nums.begin(),nums.end());
        res+=log2(maxele);
        return res;
    }
};
