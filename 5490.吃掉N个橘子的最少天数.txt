厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：

    吃掉一个橘子。
    如果剩余橘子数 n 能被 2 整除，那么你可以吃掉 n/2 个橘子。
    如果剩余橘子数 n 能被 3 整除，那么你可以吃掉 2*(n/3) 个橘子。

每天你只能从以上 3 种方案中选择一种方案。

请你返回吃掉所有 n 个橘子的最少天数。

示例 1：
输入：n = 10
输出：4
解释：你总共有 10 个橘子。
第 1 天：吃 1 个橘子，剩余橘子数 10 - 1 = 9。
第 2 天：吃 6 个橘子，剩余橘子数 9 - 2*(9/3) = 9 - 6 = 3。（9 可以被 3 整除）
第 3 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。
第 4 天：吃掉最后 1 个橘子，剩余橘子数 1 - 1 = 0。
你需要至少 4 天吃掉 10 个橘子。

示例 2：
输入：n = 6
输出：3
解释：你总共有 6 个橘子。
第 1 天：吃 3 个橘子，剩余橘子数 6 - 6/2 = 6 - 3 = 3。（6 可以被 2 整除）
第 2 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。（3 可以被 3 整除）
第 3 天：吃掉剩余 1 个橘子，剩余橘子数 1 - 1 = 0。
你至少需要 3 天吃掉 6 个橘子。

示例 3：
输入：n = 1
输出：1

示例 4：
输入：n = 56
输出：6

提示：
    1 <= n <= 2*10^9

【方法一】记忆化搜索
如果不把-1优化掉，则-1的递归会把0~n的所有dp都求一遍。
class Solution {
    unordered_map<int, int> mp;
public:
    int minDays(int n) {
        mp[0] = 0;
        mp[1] = 1;
        mp[2] = 2;
        return dfs(n);
    }

    int dfs(int n) {
        if (mp.count(n)) return mp[n];
        mp[n] = min(dfs(n / 3) + mp[n % 3], dfs(n / 2) + mp[n % 2]) + 1;
        return mp[n];
    }
};


【方法二】BFS
只能从n开始，搜索到1；从1搜索到n会超时。
因为，反向搜索使用除法，最后都会到一个很小的范围内，有很多重复已经被算过；
而正向搜索使用乘法，越乘越大，很多数到最后都会超过n，这部分搜索无用。
class Solution {
public:
    vector<int> dp;
    int minDays(int n) {
        queue<int> ique({n});
        unordered_set<int> visited={n};
        int cnt=0;
        if(n==1)    return 1;
        while(ique.size()){
            cnt++;
            for(int i=ique.size();i>0;i--){
                int tmp=ique.front();   ique.pop();
                if(tmp==1)  return cnt;
                if(tmp%2==0 && visited.count(tmp/2)==0){
                    ique.push(tmp/2);
                    visited.insert(tmp/2);
                }
                if(tmp%3==0 && visited.count(tmp/3)==0){
                    ique.push(tmp/3);
                    visited.insert(tmp/3);
                }
                if(visited.count(tmp-1)==0){
                    ique.push(tmp-1);
                    visited.insert(tmp-1);
                }
            }
        }
        return cnt;
    }
};

