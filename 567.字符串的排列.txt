给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。

换句话说，第一个字符串的排列之一是第二个字符串的子串。

示例1:
输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").

 
示例2:
输入: s1= "ab" s2 = "eidboaoo"
输出: False

注意：
    输入的字符串只包含小写字母
    两个字符串的长度都在 [1, 10,000] 之间

【方法一】暴力
【方法二】固定长度滑窗
2个字符串的排列 相等 -> 2个字符串 各个字符 的个数都一一相等。
比如aabc和baca这2个字符串的排列是相等的，都包含2个a、1个b、1个c。

题目求：s2是否包含s1的排列，也就是求证s2中是否存在1个区间，该区间长度为s1.length()(即s1字符串的长度)，
且该区间内 各个字符 的个数和s1各个字符 的个数 都一一相等。

既然区间长度是固定的(s1.length())，则将该区间从s2的最左端滑动到最右端即可。
典型的动态滑窗问题。
也就是区间的位置从[0, s1.length() - 1]到[s2.length() - s1.length(), s2.length() - 1]。

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        size_t len1 = s1.size(), len2 = s2.size();
        if (len1 > len2) return false;
        int ch_count1[26] = {0}, ch_count2[26] = {0};
        for (size_t i = 0; i < len1; ++i) {
            ++ch_count1[s1[i] - 'a'];
            ++ch_count2[s2[i] - 'a'];
        }
        for (size_t i = len1; i < len2; ++i) {
            if (isEqual(ch_count1, ch_count2)) return true;
            --ch_count2[s2[i - len1] - 'a'];
            ++ch_count2[s2[i] - 'a'];
        }
        return isEqual(ch_count1, ch_count2);
    }
    
    bool isEqual(const int* ch_count1, const int* ch_count2) {
        for (size_t i = 0; i < 26; ++i)
            if (ch_count1[i] != ch_count2[i])
                return false;
        return true;
    }
};

【方法三】最优解：滑动窗口（非固定长度）
用哈希表记录窗口中各个字符出现次数的差值
    正数表示还应该出现几次
    0表示正好
    负数表示多出现了几次

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int bucket[256]{};
        for(char c:s1)
            bucket[c]++;
        int n2=s2.size();
        int n1=s1.size();
        int r=0,l=0;
        while(r<n2){
            char c=s2[r++];
            bucket[c]--;
            while(l<r && bucket[c]<0){
                bucket[s2[l]]++;
                l++;
            }
            if(r-l == n1)   return true;
        }
        return false;
    }
};