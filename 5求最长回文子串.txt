给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：

输入: "cbbd"
输出: "bb"

【方法一】马拉车算法，O(n)时间复杂度
class Solution {
public:
    string longestPalindrome(string s) {
        string ss("@#");
        for(char i:s){
            ss.push_back(i);
            ss.push_back('#');
        }
        int maxsize=0,len=ss.size(),centerIndex=0;
        vector<int> radius(len);
        int right=0,mid=0;
        for(int i=1;i<len;i++){
            if(i<right)
                radius[i]=min(right-i,radius[2*mid-i]);
            while(ss[i-radius[i]-1]==ss[i+radius[i]+1])
                radius[i]++;
            if(right<i+radius[i]){
                mid=i;
                right=i+radius[i];
            }
            if(radius[i]>maxsize){
                maxsize=radius[i];
                centerIndex=i;
            }
        }
        int start=(centerIndex-maxsize)/2;
        return s.substr(start,maxsize);
    }
};
【方法二】动态规划，O(n²)时间复杂度
dp[i][j]表示s[i……j]是否是回文串，
状态转移方程：
dp[i][j] = (s[i] == s[j]) ？ dp[i + 1][j - 1] ：0； （其中j>i+1）
class Solution {
public:
    string longestPalindrome(string s) {
        int len=s.size();    
        if(!len)    return "";
        string res(1,s[0]);
        vector<vector<int>> dp(len,vector<int>(len,0));
        for(int i=0;i<len;i++){
            dp[i][i]=1;
            if(i!=len-1&&s[i]==s[i+1]){
                dp[i][i+1]=1;
                if(res.size()<2)
                    res=s.substr(i,2);
            }
        }
        for(int l=2;l<len;l++){
            for(int i=0;i+l<len;i++){
                if(s[i]==s[i+l]&&dp[i+1][i+l-1]){
                    dp[i][i+l]=1;
                    if(l+1>res.size())
                        res=s.substr(i,l+1);
                }
            }
        }
        return res;
    }
};
