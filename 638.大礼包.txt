在LeetCode商店中， 有许多在售的物品。

然而，也有一些大礼包，每个大礼包以优惠的价格捆绑销售一组物品。

现给定每个物品的价格，每个大礼包包含物品的清单，以及待购物品清单。请输出确切完成待购清单的最低花费。

每个大礼包的由一个数组中的一组数据描述，最后一个数字代表大礼包的价格，其他数字分别表示内含的其他种类物品的数量。

任意大礼包可无限次购买。

示例 1:

输入: [2,5], [[3,0,5],[1,2,10]], [3,2]
输出: 14
解释: 
有A和B两种物品，价格分别为¥2和¥5。
大礼包1，你可以以¥5的价格购买3A和0B。
大礼包2， 你可以以¥10的价格购买1A和2B。
你需要购买3个A和2个B， 所以你付了¥10购买了1A和2B（大礼包2），以及¥4购买2A。

示例 2:

输入: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]
输出: 11
解释: 
A，B，C的价格分别为¥2，¥3，¥4.
你可以用¥4购买1A和1B，也可以用¥9购买2A，2B和1C。
你需要买1A，2B和1C，所以你付了¥4买了1A和1B（大礼包1），以及¥3购买1B， ¥4购买1C。
你不可以购买超出待购清单的物品，尽管购买大礼包2更加便宜。

说明:

    最多6种物品， 100种大礼包。
    每种物品，你最多只需要购买6个。
    你不可以购买超出待购清单的物品，即使更便宜。

【方法一】回溯
class Solution {
public:
    int res=INT_MAX,n,sn;
    vector<int> p;
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        p=price;
        n=needs.size();
        sn=special.size();
        backtrace(0,special,needs,0);
        return res;
    }
    void backtrace(int idx, vector<vector<int>>& special,vector<int>& needs,int cost){
        if(idx==sn){
            for(int i=0;i<n;i++){
                cost+=needs[i] * p[i];
            }
            res=min(res,cost);
            return;
        }
        for(int i=0;i<7;i++){
            vector<int> tmp=needs;
            bool exit=false;
            if(i!=0){
                for(int j=0;j<n;j++){
                    tmp[j]-=special[idx][j]*i;
                    if(tmp[j]<0){
                        exit=true; 
                        break;
                    }   
                }
            }
            if(exit)    break;
            backtrace(idx+1,special,tmp,cost+i*special[idx][n]);
        }
    }
};

【方法二】记忆化搜索
将数组转换成字符串来进行哈希
class Solution {
public:
    int n,sn;
    unordered_map<string,int> memo;
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        n=needs.size();
        sn=special.size();
        return minCost(price,special,needs);
    }

    //需求为needs时的最小花费
    int minCost(vector<int>& price, vector<vector<int>>& special, vector<int>& needs){
        string str=vecToString(needs);
        if(memo.count(str))   return memo[str];
        int res=noSpecial(price,needs),j;
        for(int i=0;i<sn;i++){
            vector<int> tmp=needs;
            for(j=0;j<n;j++){
                tmp[j]-=special[i][j];
                if(tmp[j]<0)
                    break;
            }
            if(j==n)
                res=min(res,special[i][n]+minCost(price,special,tmp));
        }
        memo[str]=res;
        return res;
    }
    string vecToString(vector<int>& needs){
        string str;
        for(char num: needs)
            str+=num;
        return str;
    }
    int noSpecial(vector<int>& price, vector<int>& needs){
        int res=0;
        for(int i=0;i<n;i++){
            res+=price[i]*needs[i];
        }
        return res;
    }
};
