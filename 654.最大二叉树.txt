给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

    二叉树的根是数组中的最大元素。
    左子树是通过数组中最大值左边部分构造出的最大二叉树。
    右子树是通过数组中最大值右边部分构造出的最大二叉树。

通过给定的数组构建最大二叉树，并且输出这个树的根节点。

示例 ：
输入：[3,2,1,6,0,5]
输出：返回下面这棵树的根节点：

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1

提示：
    给定的数组的大小在 [1, 1000] 之间。

【方法一】递归
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return buildTree(nums,0,nums.size()-1);
    }
    TreeNode* buildTree(vector<int>& nums,int left,int right){
        if(left>right) return NULL;
        int maxnumindex=max_element(nums.begin()+left,nums.begin()+right+1)-nums.begin();
        int maxnum=nums[maxnumindex];
        TreeNode* node=new TreeNode(maxnum);
        node->left=buildTree(nums,left,maxnumindex-1);
        node->right=buildTree(nums,maxnumindex+1,right);
        return node;
    }
};

【方法一】
遍历一次数组并随时将新的节点插入树的相应位置，如果当前遍历的值大于树的根节点，
则将当前节点作为新的根节点，将原来的树当作新根节点的左子树，否则的话，将其递归的交给根节点的右子树处理
（因为从左向右遍历，新的节点一定在右边）。比起方法一，节约了找最大值的时间。
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        TreeNode* root=NULL;
        for(int num:nums){
            root=buildTree(num,root);
        }
        return root;
    }
    TreeNode* buildTree(int num,TreeNode* root){
        if(!root){
            root=new TreeNode(num);
            return root;
        }
        if(num>root->val){
            TreeNode* node=new TreeNode(num);
            node->left=root;
            return node;
        }
        if(num<root->val)
            root->right=buildTree(num,root->right);
        return root;
    }
};


