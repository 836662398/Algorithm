在本问题中, 树指的是一个连通且无环的无向图。

输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。

结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u < v，表示连接顶点u 和v的无向图的边。

返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u < v。

示例 1：

输入: [[1,2], [1,3], [2,3]]
输出: [2,3]
解释: 给定的无向图为:
  1
 / \
2 - 3

示例 2：

输入: [[1,2], [2,3], [3,4], [1,4], [1,5]]
输出: [1,4]
解释: 给定的无向图为:
5 - 1 - 2
    |   |
    4 - 3

注意:

    输入的二维数组大小在 3 到 1000。
    二维数组中的整数在1到N之间，其中N是输入数组的大小。

【思路】
1.遍历所有的边edges，将连通的结点放入同一个集合，形成一个联通分量G。
2.在遍历的过程中，如果边(a,b)的两个结点a, b已经属于同一联通分量，则(a,b)就是该联通分量的冗余边。

class Solution {
public:
    int parent[1001];//仅使用简单数组功能，普通数组快于动态数组vector
    int findRoot(int a){
        while(parent[a]!=a)
            a=parent[a];
        return a;
    }
    bool Unoin(int a,int b){
        int a_root=findRoot(a);
        int b_root=findRoot(b);
        if(a_root==b_root)
            return false;
        parent[a_root]=b_root;
        return true;
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        for(int i=0;i<1001;i++)//先全部初始化，可以充分利用cache，比用到后再初始化快得多
            parent[i]=i;
        for(auto edge:edges){
            if(!Unoin(edge[0],edge[1]))
                return {edge[0],edge[1]};
        }
        return {};
    }
};