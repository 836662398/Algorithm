给一非空的单词列表，返回前 k 个出现次数最多的单词。

返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。

示例 1：
输入: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
输出: ["i", "love"]
解析: "i" 和 "love" 为出现次数最多的两个单词，均为2次。
    注意，按字母顺序 "i" 在 "love" 之前。

示例 2：
输入: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
输出: ["the", "is", "sunny", "day"]
解析: "the", "is", "sunny" 和 "day" 是出现次数最多的四个单词，
    出现次数依次为 4, 3, 2 和 1 次。

注意：

    假定 k 总为有效值， 1 ≤ k ≤ 集合元素数。
    输入的单词均由小写字母组成。

扩展练习：

    尝试以 O(n log k) 时间复杂度和 O(n) 空间复杂度解决。

【思路】时间复杂度O(nlogk)，用堆
using PSI=pair<string,int>;
struct cmp
{
    bool operator()(const PSI &a,const PSI &b){
        if(a.second!=b.second)
            return a.second>b.second;
        else
            return a.first<b.first;
    }
};
class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string,int> hashmap;
        for(string s:words){
            hashmap[s]++;
        }
        vector<pair<string,int>> vec(hashmap.begin(),hashmap.end());
        priority_queue<PSI,vector<PSI>,cmp> pq;
        for(PSI p:vec){
            pq.push(p);
            if(pq.size()>k){
                pq.pop();
            }
        }
        vector<string> res;
        while(pq.size()!=0){
            res.push_back(pq.top().first);
            pq.pop();
        }
        reverse(res.begin(),res.end());
        return res;
    }
};