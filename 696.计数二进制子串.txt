给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。

示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。

注意：
    s.length 在1到50,000之间。
    s 只包含“0”或“1”字符。

【思路】
遍历数组，用now记录已经有多少个相同连续字符，用pre记录上一段相同连续字符数量。
当遍历到下一个不同字符时，就可以算出前面连续两段相同字符有min(pre,now)个符合要求子串。并更新pre,now。

class Solution {
public:
    int countBinarySubstrings(string s) {
        int n=s.size();
        int pre=0,now=1,res=0;
        for(int i=1;i<n;i++){
            if(s[i-1]==s[i])
                now++;
            else{
                res+=min(pre,now);
                pre=now;
                now=1;
            }
        }
        return res+min(pre,now);
    }
};