假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

【方法一】dp
class Solution {
public:
    int climbStairs(int n) {
        int  a=1,b=0,res;
        for(int i=1;i<=n;i++){
            res=a+b;
            b=a;
            a=res;
        }
        return res;
    }
};
【方法二】矩阵快速幂
class Solution {
public:
    vector<vector<long long>> matrix_mul(vector<vector<long long>>& a,vector<vector<long long>>& b){
        vector<vector<long long>> res(2,vector<long long>(2));
        for(int i=0;i<2;i++){
            for(int j=0;j<2;j++){
                res[i][j]=a[i][0]*b[0][j]+a[i][1]*b[1][j];
            }
        }
        return res;
    }
    vector<vector<long long>> matrix_power(vector<vector<long long>>& a,int n){
        vector<vector<long long>> res={{1,0},{0,1}};
        while(n>0){
            if(n&1)
                res=matrix_mul(res,a);
            a=matrix_mul(a,a);
            n>>=1;
        }
        return res;
    }
    int climbStairs(int n) {
        vector<vector<long long>> matrix={{1,1},{1,0}};
        return matrix_power(matrix,n)[0][0];
    }
};