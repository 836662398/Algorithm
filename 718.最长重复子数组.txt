给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。

示例 1:

输入:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
输出: 3
解释: 
长度最长的公共子数组是 [3, 2, 1]。

说明:

    1 <= len(A), len(B) <= 1000
    0 <= A[i], B[i] < 100

【方法一】动态规划
dp[i][j]表示 A中以i为结尾，B中以j为结尾的最长重复子数组 的长度
dp[i][j] = A[i] == B[j] ？dp[i -1][j -1] + 1 ：0；

优化：因为可能数组越界，所以从前往后改成从后往前，更方便，
不需要处理特殊情况，因为开辟数组的时候可以多开辟一维、一列，多开辟的部分默认为0。

dp[i][j]表示A中以i为开头，B中以j为开头的最长重复子数组长度
dp[i][j] = A[i] == B[j] ？dp[i +1][j +1] + 1 ：0；

class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int len1=A.size(),len2=B.size();
        int res=0;
        vector<vector<int>> dp(len1+1,vector<int>(len2+1,0));
        for(int i=len1-1;i>=0;i--){
            for(int j=len2-1;j>=0;j--){
                if(A[i]==B[j]){
                    dp[i][j]=dp[i+1][j+1]+1;
                    res=max(res,dp[i][j]);
                }
            }
        }
        return res;
    }
};