给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。

你可以对一个单词进行如下三种操作：

    插入一个字符
    删除一个字符
    替换一个字符

示例 1：
输入：word1 = "horse", word2 = "ros"
输出：3
解释：
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')
【思路】
dp[i][j] 代表 word1 到 i 位置转换成 word2 到 j 位置需要最少步数

所以，

当 word1[i] == word2[j]，dp[i][j] = dp[i-1][j-1]；

当 word1[i] != word2[j]，dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1

其中，dp[i-1][j-1] 表示替换操作，dp[i-1][j] 表示删除操作，dp[i][j-1] 表示插入操作。

basecase:在两个字符串前面加上‘ ’,方便直接写第一行和第一列的basecase。

class Solution {
public:
    int minDistance(string word1, string word2) {
        word1.insert(word1.begin(),' ');
        word2.insert(word2.begin(),' ');
        int len1=word1.size(),len2=word2.size();
        vector<vector<int>> dp(len1,vector<int>(len2,0));
        for(int i=0;i<len2;i++)
            dp[0][i]=i;
        for(int i=0;i<len1;i++)
            dp[i][0]=i;
        for(int i=1;i<len1;i++){
            for(int j=1;j<len2;j++){
                dp[i][j]=min({dp[i-1][j-1],dp[i-1][j],dp[i][j-1]})+1;
            }
        }
        return dp[len1-1][len2-1];
    }
};

