给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"

说明：
    如果 S 中不存这样的子串，则返回空字符串 ""。
    如果 S 中存在这样的子串，我们保证它是唯一的答案。

注意：T中可能有重复字母
【方法一】滑动窗口
其中 valid 变量表示窗口中满足 need 条件的字符个数，如果 valid 和 need.size 的大小相同，则说明窗口已满足条件，已经完全覆盖了串 T。

string minWindow(string s, string t) {
    unordered_map<char, int> need, window;
    for (char c : t) need[c]++;
    int left = 0, right = 0;
    int valid = 0;
    // 记录最小覆盖子串的起始索引及长度
    int start = 0, len = INT_MAX;
    while (right < s.size()) {
        // c 是将移入窗口的字符
        char c = s[right];
        // 右移窗口
        right++;
        // 进行窗口内数据的一系列更新
        if (need.count(c)) {
            window[c]++;
            if (window[c] == need[c])
                valid++;
        }
        // 判断左侧窗口是否要收缩
        while (valid == need.size()) {
            // 在这里更新最小覆盖子串
            if (right - left < len) {
                start = left;
                len = right - left;
            }
            // d 是将移出窗口的字符
            char d = s[left];
            // 左移窗口
            left++;
            // 进行窗口内数据的一系列更新
            if (need.count(d)) {
                if (window[d] == need[d])
                    valid--;
                window[d]--;
            }                    
        }
    }
    // 返回最小覆盖子串
    return len == INT_MAX ?
        "" : s.substr(start, len);
}

【优化】
1.用哈希表完成，由于匹配数组t可能存在重复值，所以map数值需要是int。
  总体算法模拟音乐音量上下浮动，t 的元素个数就是音量高度，t 以外的其他元素都为 0，
2.遍历 s 的过程中，遇到一个音则将其减少一个音量.（* t 数组以外的音量不可能大于 0）
  搜索过程中，指定音量下降计数 cnt 增加，减小到 0 以下不算在内，
  当减少总数等于 t 的总数时，所有数就齐了，计算长度。
3.随后进行回退，如果是 t 以外的音，其增加不改变计数 cnt，直到遇到 t 中的音，
  且该值在map中大于0时（区间中 t 的某一个音大于其原始的数量，它map的值可能会小于0），
  回退停止，继续向前搜索，重复 步骤 2。

class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char,int> hashmap;
        for(char c:t)   hashmap[c]++;
        int len1=s.size();
        int left=0,cnt=0;
        int start=0,len=INT_MAX;
        for(int right=0;right<len1;right++){
            if(--hashmap[s[right]]>=0)
                cnt++;
            while(cnt==t.size()){
                if(right-left+1<len){
                    len=right-left+1;
                    start=left;
                }
                if(++hashmap[s[left]]>0)
                    cnt--;
                left++;
            }
        }
        return len==INT_MAX? "":s.substr(start,len);
    }
};

滑动窗口模板：

int left = 0, right = 0;
for(right=0;right<s.size();right++) {`
    // 增大窗口
    window.add(s[right]);
    
    while (window needs shrink) {
        // 缩小窗口
        window.remove(s[left]);
        left++;
    }
}

