在一个 2 x 3 的板上（board）有 5 块砖瓦，用数字 1~5 来表示, 以及一块空缺用 0 来表示.

一次移动定义为选择 0 与一个相邻的数字（上下左右）进行交换.

最终当板 board 的结果是 [[1,2,3],[4,5,0]] 谜板被解开。

给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。

示例：

输入：board = [[1,2,3],[4,0,5]]
输出：1
解释：交换 0 和 5 ，1 步完成

输入：board = [[1,2,3],[5,4,0]]
输出：-1
解释：没有办法完成谜板

输入：board = [[4,1,2],[5,0,3]]
输出：5
解释：
最少完成谜板的最少移动次数是 5 ，
一种移动路径:
尚未移动: [[4,1,2],[5,0,3]]
移动 1 次: [[4,1,2],[0,5,3]]
移动 2 次: [[0,1,2],[4,5,3]]
移动 3 次: [[1,0,2],[4,5,3]]
移动 4 次: [[1,2,0],[4,5,3]]
移动 5 次: [[1,2,3],[4,5,0]]

输入：board = [[3,2,4],[1,5,0]]
输出：14

提示：
    board 是一个如上所述的 2 x 3 的数组.
    board[i][j] 是一个 [0, 1, 2, 3, 4, 5] 的排列.

【思路】BFS，类似最短路径
把二维数组变为字符串，有效减少了空间浪费，而且加快了状态的遍历。
但是字符串中0的交换需要一点窍门。

int dirs[4]={3,-3,-1,1};
class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        const string correct="123450";
        string Board;
        for(int i=0;i<2;i++)
            for(int j=0;j<3;j++)
                Board.push_back(board[i][j]+'0');
        if(Board==correct)  return 0;
        unordered_set<string> visited{Board};
        queue<string> ique({Board});//队列可以用其底层容器初始化
        int cnt=0;
        while(ique.size()){
            cnt++;
            for(int i=ique.size();i>0;i--){
                auto pattern=ique.front();  ique.pop();
                int index=pattern.find('0');
                for(int i=0;i<4;i++){
                    if(index==2 && i==3 ||index==3 && i==2)  continue;//第一行第三位无法右移，第二行第一位无法左移
                    int newid=index+dirs[i];
                    if(newid<0 || newid>=6)  continue;
                    string tmp=pattern;
                    swap(tmp[index],tmp[newid]);
                    if(tmp==correct)    return cnt;
                    if(visited.find(tmp)!=visited.end())    continue;
                    ique.push(tmp);
                    visited.insert(tmp);
                }
            }
        }
        return -1;
    }
};