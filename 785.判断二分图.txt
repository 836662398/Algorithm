给定一个无向图graph，当这个图为二分图时返回true。

如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。

graph将会以邻接表方式给出，graph[i]表示图中与节点i相连的所有节点。每个节点都是一个在0到graph.length-1之间的整数。这图中没有自环和平行边： graph[i] 中不存在i，并且graph[i]中没有重复的值。


示例 1:
输入: [[1,3], [0,2], [1,3], [0,2]]
输出: true
解释: 
无向图如下:
0----1
|    |
|    |
3----2
我们可以将节点分成两组: {0, 2} 和 {1, 3}。


示例 2:
输入: [[1,2,3], [0,2], [0,1,3], [0,2]]
输出: false
解释: 
无向图如下:
0----1
| \  |
|  \ |
3----2
我们不能将节点分割成两个独立的子集。

注意:
    graph 的长度范围为 [1, 100]。
    graph[i] 中的元素的范围为 [0, graph.length - 1]。
    graph[i] 不会包含 i 或者有重复的值。
    图是无向的: 如果j 在 graph[i]里边, 那么 i 也会在 graph[j]里边。

【思路】DFS
染色法：如果给定的无向图连通，那么我们就可以任选一个节点开始，给它染成红色。
随后我们对整个图进行遍历，将该节点直接相连的所有节点染成绿色，表示这些节点不能与起始节点属于同一个集合。
我们再将这些绿色节点直接相连的所有节点染成红色，以此类推，直到无向图中的每个节点均被染色。

如果我们能够成功染色，那么红色和绿色的节点各属于一个集合，这个无向图就是一个二分图；
如果我们未能成功染色，即在染色的过程中，某一时刻访问到了一个已经染色的节点，
并且它的颜色与我们将要给它染上的颜色不相同，也就说明这个无向图不是一个二分图。

class Solution {
public:
    vector<int> colors;
    bool isBipartite(vector<vector<int>>& graph) {
        int len=graph.size();
        colors=vector<int>(len,0);
        for(int i=0;i<len;i++){
            if(colors[i]==0&&!dfs(i,graph,1)){
                return false;
            }
        }
        return true;
    }
    bool dfs(int index,vector<vector<int>>& graph,int color){//该节点是否能被成功二分
        if(colors[index]==color)
            return true;
        else if(colors[index]!=0){
            return false;
        }
        colors[index]=color;
        for(int node:graph[index]){
            if(!dfs(node,graph,color==1?2:1))
                return false;
        }
        return true;
    }
};
