一个已排序好的表 A，其包含 1 和其他一些素数.  当列表中的每一个 p<q 时，我们可以构造一个分数 p/q 。

那么第 k 个最小的分数是多少呢?  以整数数组的形式返回你的答案, 这里 answer[0] = p 且 answer[1] = q.

示例:
输入: A = [1, 2, 3, 5], K = 3
输出: [2, 5]
解释:
已构造好的分数,排序后如下所示:
1/5, 1/3, 2/5, 1/2, 3/5, 2/3.
很明显第三个最小的分数是 2/5.

输入: A = [1, 7], K = 1
输出: [1, 7]

注意:

    A 长度的取值范围在 2 — 2000.
    每个 A[i] 的值在 1 —30000.
    K 取值范围为 1 —A.length * (A.length - 1) / 2
【思路】二分+滑动窗口
under(x)函数返回所以分数中小于x的分数数量以及最大的分数的分子、分母。

在 under(x) 函数中使用滑动窗口的方法：对于每个 primes[j]，找出最大的 i 使得 primes[i] / primes[j] < x。
随着 j 的增加，分母变大，对于上一次循环的结尾的i必定成立，所以i不需要从0开始 。因此可以O(n)时间内完成。

然后用二分找到符合条件的x值。

struct node{
    int cnt,numerator,denominator;
};
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& A, int K) {
        double hi=1.0,low=0;
        node tmp;
        while(1){
            double mid=(low+hi)*0.5;
            tmp=under(A,mid);
            if(tmp.cnt<K)
                low=mid;
            else if(tmp.cnt==K)
                return {tmp.numerator,tmp.denominator};
            else
                hi=mid;
        }
        return {};
    }
    node under(vector<int>& A,double x){
        int cnt=0,n=A.size();
        int i=1,j=-1;
        double num,ma=INT_MIN;
        node res;
        for(;i<n;i++){
            while(j+1<i && A[j+1]<x*A[i]){
                j++;
            }
            cnt+= j+1;
            if(j>-1&&A[j]*1.0/A[i]>ma){
                res={0,A[j],A[i]};
                ma=A[j]*1.0/A[i];
            }
        }
        res.cnt=cnt;
        return res;
    }
};