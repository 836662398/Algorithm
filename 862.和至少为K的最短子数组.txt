返回 A 的最短的非空连续子数组的长度，该子数组的和至少为 K 。

如果没有和至少为 K 的非空子数组，返回 -1 。

示例 1：
输入：A = [1], K = 1
输出：1

示例 2：
输入：A = [1,2], K = 4
输出：-1

示例 3：
输入：A = [2,-1,2], K = 3
输出：3

提示：

    1 <= A.length <= 50000
    -10 ^ 5 <= A[i] <= 10 ^ 5
    1 <= K <= 10 ^ 9

【思路】前缀和+单调双端队列
将前缀和sum[i]放进单调双端队列
遍历数组，当前前缀和为sum[i]
1.如果sum[i]不比队尾的sum[back]值大，则可以将该队尾弹出，因为此时sum[i]一定可以更好地替代sum[back]，
后面某一sum[j]如果满足要求sum[j]-sum[back]>=K，因为sum[back]<=sum[i]，所以sum[j]-sum[i]必定>=K,且数组更短。

2.如果sum[i]-sum[front]>=K，i与队首front满足要求，则可以将该front弹出。
因为后面如何有和该front满足要求的sum[j]，j-front一定大于i-front，不需要再考虑了。

class Solution {
public:
    int shortestSubarray(vector<int>& A, int K) {
        int n=A.size();
        deque<pair<int,int>> ideque;//{值，下标}
        int sum=0,res=INT_MAX;
        ideque.push_back({0,-1});
        for(int i=0;i<n;i++){
            if (A[i] >= K) return 1;
            sum+=A[i];
            while(ideque.size() && sum<=ideque.back().first){
                ideque.pop_back();
            }
            ideque.push_back({sum,i});
            while(sum-ideque.front().first>=K){
                res=min(res,i-ideque.front().second);
                ideque.pop_front();
            }
        }
        return res==INT_MAX? -1:res;
    }
};