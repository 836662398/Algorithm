亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。

游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。

亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。

假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。

示例：
输入：[5,3,4,5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。

提示：
    2 <= piles.length <= 500
    piles.length 是偶数。
    1 <= piles[i] <= 500
    sum(piles) 是奇数。

【方法一】递归，超时
【方法二】DP
dp[i][j]表示剩余 第i 到 第j堆时，能得到的最大 分数差（先手拿到的最大数量-后手拿到的最大数量）
dp[i][j]=max(piles[i]-dp[i+1][j],piles[j]-dp[i][j-1]);
basecase:dp[i][i]=piles[i]
从下往上，从左往右遍历
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int len=piles.size();
        vector<vector<int>> dp(len,vector<int>(len));
        for(int i=0;i<len;i++)
            dp[i][i]=piles[i];
        for(int i=len-2;i>=0;i--){
            for(int j=i+1;j<len;j++){
                dp[i][j]=max(piles[i]-dp[i+1][j],piles[j]-dp[i][j-1]);
            }
        }
        return dp[0][len-1]>0;
    }
};
【方法三】博弈问题通用DP
first[i][j] 表示，对于 piles[i...j] 这部分石头堆，先手能获得的最高分数。
second[i][j] 表示，对于 piles[i...j] 这部分石头堆，后手能获得的最高分数。
转移方程：
first[i][j]=max(piles[i]+second[i+1][j],piles[j]+second[i][j-1]);
second[i][j]=min(first[i+1][j],first[i][j-1]); (因为先手必定取自己最赚，也就是对手最亏的情况)

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int k = piles.size();
        vector<vector<int>> first(k,vector<int>(k));
        vector<vector<int>> second(k,vector<int>(k));
        for(int i=0; i<k; i++) {
            first[i][i] = piles[i];
            second[i][i] = 0;
        }
        for(int i=k-2; i>=0; i--) {
            for(int j=i+1; j<k; j++) {
                first[i][j]=max(piles[i]+second[i+1][j],piles[j]+second[i][j-1]);
                second[i][j]=min(first[i+1][j],first[i][j-1]);
            }
        }
        return first[0][k-1] > second[0][k-1];
    }
}; 

【方法四】数学
显然，亚历克斯总是赢得 2 堆时的游戏。 通过一些努力，我们可以获知她总是赢得 4 堆时的游戏。

如果亚历克斯最初获得第一堆，她总是可以拿第三堆。 如果她最初取到第四堆，她总是可以取第二堆。第一 + 第三，第二 + 第四 中的至少一组是更大的，所以她总能获胜。

我们可以将这个想法扩展到 N 堆的情况下。设第一、第三、第五、第七桩是白色的，第二、第四、第六、第八桩是黑色的。 亚历克斯总是可以拿到所有白色桩或所有黑色桩，其中一种颜色具有的石头数量必定大于另一种颜色的。

因此，偶数堆时亚历克斯总能赢得比赛。

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        return true;
    }
};

