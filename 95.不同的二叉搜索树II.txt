给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:
输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

【方法一】暴力递归
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(!n)  return vector<TreeNode*>();
        return helper(1,n);
    }
    vector<TreeNode*> helper(int left,int right){
        if(left>right)
            return vector<TreeNode*>{nullptr};
        vector<TreeNode*> cur;
        for(int i=left;i<=right;i++){
            vector<TreeNode*> l=helper(left,i-1);
            vector<TreeNode*> r=helper(i+1,right);
            for(int j=0;j<l.size();j++){
                for(int k=0;k<r.size();k++){
                    TreeNode *root=new TreeNode(i);//此处root不能放在这两层循环外，bug点
                    root->left=l[j];
                    root->right=r[k];
                    cur.push_back(root);
                }
            }
        }
        return cur;
    }
};
【方法二】记忆化搜索
class Solution {
public:
    vector<vector<vector<TreeNode*>>> memo;
    vector<TreeNode*> generateTrees(int n) {
        if(!n)  return vector<TreeNode*>();
        memo=vector<vector<vector<TreeNode*>>>(n+2,vector<vector<TreeNode*>>(n+2)); //这边必须+2,不然会越界！
        return helper(1,n);
    }
    vector<TreeNode*> helper(int left,int right){
        if(left>right){
            memo[left][right]={nullptr};
            return {nullptr};
        }
        vector<TreeNode*> cur;
        for(int i=left;i<=right;i++){
            vector<TreeNode*> l= (!memo[left][i-1].empty()?memo[left][i-1]:helper(left,i-1));
            vector<TreeNode*> r= (!memo[i+1][right].empty()?memo[i+1][right]:helper(i+1,right));//[n+1][n+1]出处，所以规模必须为n+2个
            for(int j=0;j<l.size();j++){
                for(int k=0;k<r.size();k++){
                    TreeNode *root=new TreeNode(i);
                    root->left=l[j];
                    root->right=r[k];
                    cur.push_back(root);
                }
            }
        }
        memo[left][right]=cur;
        return cur;
    }
};
