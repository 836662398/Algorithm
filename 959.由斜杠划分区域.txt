在由 1 x 1 方格组成的 N x N 网格 grid 中，每个 1 x 1 方块由 /、\ 或空格构成。这些字符会将方块划分为一些共边的区域。

（请注意，反斜杠字符是转义的，因此 \ 用 "\\" 表示。）。返回区域的数目。

【方法一】并查集
1.我们可以通过/和\将一个区域划分为四块，然后我们按照顺时针自顶开始的顺序标记划分后的区域为0、1、2和3（北、东、南、西）。
我们此时就可以开始遍历输入的grid。
2.如果碰到'/'，我们就将0和3进行归并。如果碰到'\'，我们就将1和2归并。如果碰到' '， 我们就将0、1、2、和3全部归并。
3.最后，再使每个矩阵与右、下矩阵归并（只需归并两次），将矩阵的 “东”（1）和右边矩阵的“西”（3）合并（不管是'/'还是'\'，每个点总是与相邻大格中的相邻点在同一组），
将矩阵的“南”（2）和下边矩阵的“北”（0）合并。这样我们就把中间这个部分归并为了一个集合。对于下方的三角形区域做同样的操作。
class Solution {
public:
    vector<int> parent;
    int findroot(int a){
        while(parent[a]!=a)
            a=parent[a];
        return a;
    }
    void Union(int a,int b){
        parent[findroot(b)]=findroot(a);
    }
    int regionsBySlashes(vector<string>& grid) {
        int N=grid.size();
        parent=vector<int>(N*N*4);
        for(int i=0;i<N*N*4;i++){
            parent[i]=i;
        }
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                int prefix=(N*i+j)*4;
                if(grid[i][j]==' '){
                    Union(prefix,prefix+1);
                    Union(prefix,prefix+2);
                    Union(prefix,prefix+3);
                }
                else if(grid[i][j]=='/'){
                    Union(prefix,prefix+3);
                    Union(prefix+1,prefix+2);
                }
                else if(grid[i][j]=='\\'){
                    Union(prefix,prefix+1);
                    Union(prefix+2,prefix+3);
                }
                //和右、下两个矩阵合并，只需要合并两个地方
                if(j!=N-1)
                    Union(prefix+1,prefix+7);//将矩阵的 “东”和右边矩阵的“西”合并
                if(i!=N-1)
                    Union(prefix+2,prefix+4*N);//将矩阵的“南”和下边矩阵的“北”合并
            }
        }
        int res=0;
        for(int i=0;i<N*N*4;i++){//遍历所有点，代表节点为自身的节点数即为集合数
            if(findroot(i)==i)
                res++;
        }
        return res;
    }
};

【方法二】图像像素化
将 / 转为
001
010
100.

空格转为
000
000
000

\转为
100
010
001。

将原来n*n方格转为3n * 3n 方格。求0的连通量个数（洪泛flood fill算法）。

比如

//
/

转化为

001001
010010
100100
001000
010000
100000
class Solution {
public:
    void infection(int x, int y, vector<vector<int>>& grid){
        int N=grid.size();
        if(x>=N||x<0||y>=N||y<0||grid[x][y]!=0)
            return;
        grid[x][y]=1;
        infection(x+1,y,grid);
        infection(x-1,y,grid);
        infection(x,y+1,grid);
        infection(x,y-1,grid);
    }
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        vector<vector<int>> new_grid(3*n, vector<int>(3*n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '/') {
                    new_grid[3*i][3*j+2] = 1;
                    new_grid[3*i+1][3*j+1] = 1;
                    new_grid[3*i+2][3*j] = 1;
                } else if (grid[i][j] == '\\') {
                    new_grid[3*i][3*j] = 1;
                    new_grid[3*i+1][3*j+1] = 1;
                    new_grid[3*i+2][3*j+2] = 1;
                }
            }
        }
        int cnt = 0;
        for (int i = 0; i < 3*n; ++i) {
            for (int j = 0; j < 3*n; ++j) {
                if (!new_grid[i][j]) {
                    cnt++;
                    infection(i, j, new_grid);
                }
            }
        }
        return cnt;
    }
};

