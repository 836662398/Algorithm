小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。
出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。

示例 1：

    输入：leaves = "rrryyyrryyyrr"

    输出：2

    解释：调整两次，将中间的两片红叶替换成黄叶，得到 "rrryyyyyyyyrr"

示例 2：

    输入：leaves = "ryr"

    输出：0

    解释：已符合要求，不需要额外操作

提示：

    3 <= leaves.length <= 10^5
    leaves 中只包含字符 'r' 和字符 'y'

【思路】DP
由于我们想要将收藏集中树叶的排列调整成「红、黄、红」三部分，因此我们可以用 3 个状态分别表示其中的每一部分，
即状态 0 和状态 2 分别表示前面和后面的红色部分，状态 1 表示黄色部分。

此时，我们就可以尝试使用动态规划解决本题了。我们用 f[i][j] 表示对于第 0 片到第 i 片叶子进行调整操作，
并且第 i 片叶子处于状态 j 时的最小操作次数。在推导状态转移方程时，我们可以分别对于每一种状态进行分析。

第一片叶子必须为r，所以
basecase : dp[0][0]= leaves[0]=='r'? 0 : 1

class Solution {
public:
    int minimumOperations(string leaves) {
        int dp[100005][3];
        memset(dp,0x3f,sizeof(dp));
        dp[0][0]= leaves[0]=='r'? 0 : 1;
        int n=leaves.size();
        for(int i=1;i<n;i++){
            dp[i][0]= dp[i-1][0] + (leaves[i]=='r'? 0 : 1);
            dp[i][1]= min(dp[i-1][0],dp[i-1][1])+ (leaves[i]=='y'? 0 : 1);
            dp[i][2]= min(dp[i-1][1],dp[i-1][2])+ (leaves[i]=='r'? 0 : 1);
        }
        return dp[n-1][2];
    }
};

