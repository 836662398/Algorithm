给你一个由若干 0 和 1 组成的二维网格 grid ，其中 0 表示水，而 1 表示陆地。岛屿由水平方向或竖直方向上相邻的 1 （陆地）连接形成。

如果 恰好只有一座岛屿 ，则认为陆地是 连通的 ；否则，陆地就是 分离的 。

一天内，可以将任何单个陆地单元（1）更改为水单元（0）。

返回使陆地分离的最少天数。

示例 1：

输入：grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
输出：2
解释：至少需要 2 天才能得到分离的陆地。
将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。

示例 2：

输入：grid = [[1,1]]
输出：2
解释：如果网格中都是水，也认为是分离的 ([[1,1]] -> [[0,0]])，0 岛屿。

示例 3：

输入：grid = [[1,0,1,0]]
输出：0

示例 4：

输入：grid = [[1,1,0,1,1],
             [1,1,1,1,1],
             [1,1,0,1,1],
             [1,1,0,1,1]]
输出：1

示例 5：

输入：grid = [[1,1,0,1,1],
             [1,1,1,1,1],
             [1,1,0,1,1],
             [1,1,1,1,1]]
输出：2

提示：

    1 <= grid.length, grid[i].length <= 30
    grid[i][j] 为 0 或 1

【思路】dfs+脑筋急转弯
结果最大为2，因为无论什么样的陆地，都可以通过将一个角切下来得到分离的岛屿。
class Solution {
public:
    int m,n;
    int dirs[5]={1,0,-1,0,1};
    void floodfill(vector<vector<int>>& grid,int row,int col){
        grid[row][col]=2;
        for(int i=0;i<4;i++){
            int nrow=row+dirs[i];
            int ncol=col+dirs[i+1];
            if(nrow<0 || nrow>=m||ncol<0||ncol>=n||grid[nrow][ncol]!=1)  continue;
            floodfill(grid,nrow,ncol);
        }
    }
    bool isSepa(vector<vector<int>>& grid){
        vector<vector<int>> g=grid;
        bool first=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(g[i][j]==1)
                    if(first){
                        floodfill(g,i,j);
                        first=0;
                    }else
                        return true;               
            }
        }
        return false;
    }
    int minDays(vector<vector<int>>& grid) {
        m=grid.size(),n=grid[0].size();
        if(isSepa(grid))    return 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]){
                    grid[i][j]=0;
                    if(isSepa(grid))    return 1;
                    grid[i][j]=1;
                }
            }
        }
        return 2;
    }
};