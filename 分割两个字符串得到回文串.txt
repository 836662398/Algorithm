给你两个字符串 a 和 b ，它们长度相同。请你选择一个下标，将两个字符串都在 相同的下标 分割开。由 a 可以得到两个字符串： aprefix 和 asuffix ，满足 a = aprefix + asuffix ，同理，由 b 可以得到两个字符串 bprefix 和 bsuffix ，满足 b = bprefix + bsuffix 。请你判断 aprefix + bsuffix 或者 bprefix + asuffix 能否构成回文串。

当你将一个字符串 s 分割成 sprefix 和 ssuffix 时， ssuffix 或者 sprefix 可以为空。比方说， s = "abc" 那么 "" + "abc" ， "a" + "bc" ， "ab" + "c" 和 "abc" + "" 都是合法分割。

如果 能构成回文字符串 ，那么请返回 true，否则返回 false 。

请注意， x + y 表示连接字符串 x 和 y 。

 

示例 1：

输入：a = "x", b = "y"
输出：true
解释：如果 a 或者 b 是回文串，那么答案一定为 true ，因为你可以如下分割：
aprefix = "", asuffix = "x"
bprefix = "", bsuffix = "y"
那么 aprefix + bsuffix = "" + "y" = "y" 是回文串。

示例 2：

输入：a = "ulacfd", b = "jizalu"
输出：true
解释：在下标为 3 处分割：
aprefix = "ula", asuffix = "cfd"
bprefix = "jiz", bsuffix = "alu"
那么 aprefix + bsuffix = "ula" + "alu" = "ulaalu" 是回文串。

提示：

    1 <= a.length, b.length <= 105
    a.length == b.length
    a 和 b 都只包含小写英文字母

【思路】
以Aprefix+Bsuffix为例，如果它是一个回文串，考虑它的左半边，有两种情况：
    1.前一段，满足A[i]=B[n−i+1]，后一段，满足A[i]=A[n−i+1]
    2.前一段，满足A[i]=B[n−i+1]，后一段，满足B[i]=B[n−i+1]
因此每判断一次A[i]=B[n−i+1]后，再判断字符串A[i+1……n-i]或B[i+1……n-i]是否为回文串即可，但需要预处理
class Solution {
public:
    bool memo1[100005]{};//memo1[i]表示字符串A[i……n-1-i]是否为回文串
    bool memo2[100005]{};
    bool checkPalindromeFormation(string a, string b) {
        int n=a.size(),len =2*n;
        for(int i=n/2;i>=0;i--){
            if(a[i]==a[n-1-i])
                memo1[i]=1;
            else
                break;
        }
        for(int i=n/2;i>=0;i--){
            if(b[i]==b[n-1-i])
                memo2[i]=1;
            else
                break;
        }
        if(memo1[0] || memo2[0])    return true;
        return helper(a,b) || helper(b,a);
    }
    bool helper(string a,string b){
        int n=a.size();
        for(int i=0;i<n;i++){
            if(a[i]==b[n-1-i]){
                if(memo1[i+1] || memo2[i+1]||n==2*(i+1))    return true;
            }else
                break;
        }
        return false;
    }
};

