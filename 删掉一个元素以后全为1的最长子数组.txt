给你一个二进制数组 nums ，你需要从中删掉一个元素。

请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。

如果不存在这样的子数组，请返回 0 。

提示 1：
输入：nums = [1,1,0,1]
输出：3
解释：删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。

示例 2：
输入：nums = [0,1,1,1,0,1,1,0,1]
输出：5
解释：删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。

示例 3：
输入：nums = [1,1,1]
输出：2
解释：你必须要删除一个元素。

示例 4：
输入：nums = [1,1,0,0,1,1,1,0,1]
输出：4

示例 5：
输入：nums = [0,0,0]
输出：0

提示：
    1 <= nums.length <= 10^5
    nums[i] 要么是 0 要么是 1 。
【方法一】
a 存中间有一个“非1”的和，b 存连续1的和，遇 1 两数自增，遇“非1” a=b;b=0。
扫描过程保存最大的 a 值，最后处理一下全1特例即可。
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int ret = 0;
        int a = 0;
        int b = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 1) {
                ++a;
                ++b;
                ret = max(ret, a);
            } else {
                a = b;
                b = 0;
            }
        }
        if (ret == n) ret--;
        return ret;
    }
};

【方法二】
用tmp记录全1块的长度，用pre记录全一块前面一个0左边的全一块长度（如果左边是0，则长度为0）；
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int len=nums.size();
        int pre=0,res=0,tmp=0;
        for(int i=0;i<len;i++){
            if(nums[i])
                tmp++;
            else{
                res=max(res,tmp+pre);
                pre=tmp;
                tmp=0;
            }
        }
        res=max(res,tmp+pre);
        return res==len?len-1:res;
    }
};

【方法三】并查集
用 l[i] 记录该全1块的长度，只需要在块的左右两边下标i,j 记录即可。
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int len=nums.size();
        vector<int> l(len+1,0);
        nums.push_back(0);
        int head=0,tail=0;
        int res=0;
        for(int i=0;i<len;i++){
            if((!i||nums[i-1]==0)&&nums[i]==1)
                head=i;
            if(nums[i+1]==0&&nums[i]==1){
                tail=i;
                l[head]=l[tail]=tail-head+1;
                res=max(res,tail-head+1);
            }
        }
        for(int i=1;i<len;i++){
            if(nums[i]==0){
                res=max(res,l[i-1]+l[i+1]);
            }
        }
        if(res==n)
            return n-1;
        return res;
    }
};
