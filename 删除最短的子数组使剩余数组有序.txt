给你一个整数数组 arr ，请你删除一个子数组（可以为空），使得 arr 中剩下的元素是 非递减 的。

一个子数组指的是原数组中连续的一个子序列。

请你返回满足题目要求的最短子数组的长度。

 

示例 1：

输入：arr = [1,2,3,10,4,2,3,5]
输出：3
解释：我们需要删除的最短子数组是 [10,4,2] ，长度为 3 。剩余元素形成非递减数组 [1,2,3,3,5] 。
另一个正确的解为删除子数组 [3,10,4] 。

示例 2：

输入：arr = [5,4,3,2,1]
输出：4
解释：由于数组是严格递减的，我们只能保留一个元素。所以我们需要删除长度为 4 的子数组，要么删除 [5,4,3,2]，要么删除 [4,3,2,1]。

示例 3：

输入：arr = [1,2,3]
输出：0
解释：数组已经是非递减的了，我们不需要删除任何元素。

示例 4：

输入：arr = [1]
输出：0


提示：
    1 <= arr.length <= 10^5
    0 <= arr[i] <= 10^9

【思路】双指针
前后加两个哨兵防止越界
先找出最大有序前缀的右边界sta和最大有序后缀的左边界end
前缀指针i和后缀指针j, i从0开始，j从后缀的起点end开始
如果arr[j]>=arr[i],则代表[0,i]的和[j , ……]的可形成升序，计算值并和min比较，
    然后前缀指针i右移，选择更大的值进一步比较；
如果arr[j]<arr[i],则代表j的值过小，后缀指针右移,直到能形成升序
    
补充：前缀指针i的作用是缩小距离，后缀指针j的作用是用来形成升序

class Solution {
public:
    int findLengthOfShortestSubarray(vector<int>& nums) {
        nums.insert(nums.begin(),0);
        nums.push_back(1e9);
        int sta=-1,end=-1;
        int n=nums.size();
        for(sta=1;sta<n-1 && nums[sta]<=nums[sta+1];sta++);
        for(end=n-2;end>0 && nums[end-1]<=nums[end];end--);
        if(sta==n-1)  return 0;
        int res=1e5,i=0,j=end;
        while(i<=sta && j<=n-1){
            if(nums[i]>nums[j]){
                j++;
            }else{
                res=min(res,j-i-1);
                i++;
            }
        }
        return res;
    }
};