给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1

示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

提示：
    2 <= n <= 1000
【思路】因为答案会溢出，需要取模，dp转移方程用的是max，所以无法dp。
贪心：
切分规则：
    最优： 3 。把绳子尽可能切为多个长度为 3 的片段，留下的最后一段绳子的长度可能为 0,1,2 三种情况。
    次优： 2 。若最后一段绳子长度为 2 ；则保留，不再拆为 1+1 。
    最差： 1 。若最后一段绳子长度为 1 ；则应把一份 3+1 替换为 2+2，因为 2×2>3×1。
证明：https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/
几何平均数小于等于算术平均数，且在各元素相等时，几何平均数取最大，所以应该尽可能使拆分的数字相等。
假设数字被拆分成a个x,n=ax，则成绩y=x^a=（x^(1/x)）^n，求导，得x=3时最大。
class Solution {
public:
    const int mod=1e9+7;
    long long pow(long long x,int n){
        long long res=1;
        for(int i=n;i!=0;i/=2){
            if(i&1)
                res=res*x%mod;
            x=x*x%mod;
        }
        return res;
    }
    int cuttingRope(int n) {
        if(n==2)    return 1;
        if(n==3)    return 2;
        if(n%3==0)  return pow(3,n/3)%mod;
        if(n%3==1)  return pow(3,(n-4)/3)*2*2%mod;
        if(n%3==2)  return pow(3,n/3)*2%mod;
        return 0;
    }
};
