输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

 

示例 1：

输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]

示例 2：

输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]

限制：
    0 <= matrix.length <= 100
    0 <= matrix[i].length <= 100

【方法一】一层一层从外往里输出
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector <int> res;
        if(matrix.empty()) return res;
        int rl = 0, rh = matrix.size()-1; //记录待打印的矩阵上下边缘
        int cl = 0, ch = matrix[0].size()-1; //记录待打印的矩阵左右边缘
        while(1){
            for(int i=cl; i<=ch; i++) res.push_back(matrix[rl][i]);//从左往右
            if(++rl > rh) break; //若超出边界，退出
            for(int i=rl; i<=rh; i++) res.push_back(matrix[i][ch]);//从上往下
            if(--ch < cl) break;
            for(int i=ch; i>=cl; i--) res.push_back(matrix[rh][i]);//从右往左
            if(--rh < rl) break;
            for(int i=rh; i>=rl; i--) res.push_back(matrix[i][cl]);//从下往上
            if(++cl > ch) break;
        }
        return res;
    }
};

【方法二】按层模拟
每层求出左上和右下坐标，超出坐标范围说明需要转向；
遇到起始坐标时，进入下一层。
class Solution {
   public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty())
            return {};
        int m = matrix.size(), n = matrix[0].size(), cnt = m * n;
        int maxc = min((m + 1) / 2, (n + 1) / 2);	//最大的层数
        int dirs[5] = {0, 1, 0, -1, 0};
        vector<int> res;
        for (int i = 0; i < maxc; i++) {
            int row = i, col = i;
            int maxRow = m - i - 1, maxCol = n - i - 1;
            int idx = 0;
            do {
                res.push_back(matrix[row][col]);
                cnt--;
                if (row + dirs[idx] < i || col + dirs[idx + 1] < i ||
                    row + dirs[idx] > maxRow || col + dirs[idx + 1] > maxCol) {
                    idx = (idx + 1) % 4;
                }
                row += dirs[idx];
                col += dirs[idx + 1];
            } while (!(row == i && col == i) && cnt);
        }
        return res;
    }
};