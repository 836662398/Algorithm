请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，
第三行再按照从左到右的顺序打印，其他行以此类推。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [20,9],
  [15,7]
]

提示：
    节点总数 <= 1000

【思路】根据结果数组的大小来判断属于奇数层还是偶数层。
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root)   return {};
        queue<TreeNode*> bfsque;
        vector<vector<int>> res;
        bfsque.push(root);
        while(bfsque.size()){
            vector<int> ans;
            for(int i=bfsque.size();i>0;i--){
                auto tmp=bfsque.front();  bfsque.pop();
                ans.push_back(tmp->val);
                if(tmp->left)   bfsque.push(tmp->left);
                if(tmp->right)  bfsque.push(tmp->right);
            }
            if(res.size()&1)
                reverse(ans.begin(),ans.end());
            res.push_back(ans);
        }
        return res;
    }
};
