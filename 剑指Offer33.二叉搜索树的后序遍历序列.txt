输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都互不相同。


参考以下这颗二叉搜索树：

     5
    / \
   2   6
  / \
 1   3

示例 1：
输入: [1,6,3,2,5]
输出: false

示例 2：
输入: [1,3,2,6,5]
输出: true

提示：
    数组长度 <= 1000

【方法一】单调栈
从后往前遍历数组，即为根节点->右子树->左子树，
若遍历到的数比前一个数小，说明到达了前面某root左子树，该节点为前面 值最接近它的节点(记该root节点值为pre)的左节点，
则后面遍历到的数必须比pre小，因为是其左子树上的点，如果不满足，则非二叉搜索树。

单调栈可以快速求出左侧第一个比其小的节点，并记录该根的值，方便后续比较。
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        stack<int> sta;
        int len=postorder.size();
        int preRootVal=INT_MAX;
        for(int i=len-1;i>=0;i--){
            int val=postorder[i];
            if(val>preRootVal)
                return false;
            while(sta.size()&&val<sta.top()){
                preRootVal=sta.top();
                sta.pop();
            }
            sta.push(val);
        }
        return true;
    }
};
时间复杂度O(n).

【方法二】分治
从左向右遍历，找到第一个大于根节点（数组尾元素）的节点m，m前面为左子树,m后面为右子树，
若未二叉搜索树，则m后面节点都比根节点大，且对左右子树递归，全部返回true。
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        return helper(postorder,0,postorder.size()-1);
    }
    bool helper(vector<int>& postorder,int start,int end){
        if(start>=end)  return true;
        int pivot=postorder[end];
        int index=start;
        while(postorder[index]<pivot)   index++;
        int m=index;
        while(postorder[index]>pivot)   index++;
        return index==end&&helper(postorder,start,m-1)&&helper(postorder,m,end-1);
    }
};
时间复杂度同快排，平均O(nlgn).