如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。

例如，
[2,3,4] 的中位数是 3
[2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：
    void addNum(int num) - 从数据流中添加一个整数到数据结构中。
    double findMedian() - 返回目前所有元素的中位数。

示例 1：
输入：
["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"]
[[],[1],[2],[],[3],[]]
输出：[null,null,null,1.50000,null,2.00000]

示例 2：
输入：
["MedianFinder","addNum","findMedian","addNum","findMedian"]
[[],[2],[],[3],[]]
输出：[null,null,2.00000,null,2.50000]

限制：
    最多会对 addNum、findMedia进行 50000 次调用。

【思路】优先队列
用两个堆，一个小根堆存放大于等于中位数的数，另一个大根堆存放小于等于中位数的数，保持两个堆大小平衡。
class MedianFinder {
public:
    priority_queue<int,vector<int>,greater<int>> smalltop;//存放大于等于中位数的数
    priority_queue<int,vector<int>,less<int>> largetop;//存放小于等于中位数的数
    MedianFinder() {

    }
    
    void addNum(int num) {
        if(smalltop.empty() && largetop.empty())
            smalltop.push(num);
        else if(num>smalltop.top())
            smalltop.push(num);
        else
            largetop.push(num);
        if(largetop.size()>smalltop.size()+1){
            smalltop.push(largetop.top());
            largetop.pop();
        }
        else if(smalltop.size()>largetop.size()+1){
            largetop.push(smalltop.top());
            smalltop.pop();
        }
    }
    
    double findMedian() {
        if(largetop.size()>smalltop.size())
            return largetop.top();
        else if(largetop.size()<smalltop.size())
            return smalltop.top();
        else
            return (largetop.top()+smalltop.top())*0.5;
    }
};
