给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

示例 1:
输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

提示：
    0 <= num < 231

【方法一】DFS	
class Solution {
public:
    int translateNum(int num) {
        if(num<=9)    return 1;
        if(num%100<26 &&num%100>9)
            return translateNum(num/100)+translateNum(num/10);
        else
            return translateNum(num/10);
    }
};

【方法二】动态规划
class Solution {
public:
    int translateNum(int num) {
        string s=to_string(num);
        int len=s.size();
        if(len==1)  return 1;
        int ppre=1,pre=1,res=1;
        for(int i=1;i<len;i++){
            res=0;
            if(s[i-1]=='1'||(s[i-1]=='2'&&s[i]<'6'))
                res+=ppre;
            res+=pre;
            ppre=pre;
            pre=res;
        }
        return res;
    }
};
