请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

提示：
    s.length <= 40000

【方法一】动态规划+哈希表记录
三种情况可以合并成两种，memo[i]表示字符i上一次出现的位置
dp[j]=dp[j−1]+1 ​ ,dp[j−1]<j−i
         j−i              ,dp[j−1]≥j−i​
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.size();
        int tmp=0,res=0;
        vector<int> memo(128,-1);
        for(int i=0;i<len;i++){
            if(i-memo[s[i]]<=tmp)
                tmp=i-memo[s[i]];
            else
                tmp++;
            res=max(tmp,res);
            memo[s[i]]=i;
        }
        return res;
    }
};

【方法二】双指针+哈希表记录
保证[left+1,right]内无重复字符且为以right结尾的最大子串
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.size();
        int res=0,left=-1;
        vector<int> memo(128,-1);
        for(int right=0;right<len;right++){
            left=max(left,memo[s[right]]);
            res=max(res,right-left);
        }
        return res;
    }
};