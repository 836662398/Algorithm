一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。

示例 1：
输入：nums = [4,1,4,6]
输出：[1,6] 或 [6,1]

示例 2：
输入：nums = [1,2,10,4,1,4,3,3]
输出：[2,10] 或 [10,2]

限制：

    2 <= nums.length <= 10000

【思路】
先对所有数字进行一次异或，得到两个出现一次的数字的异或值。

在异或结果中找到任意为 111 的位。

根据这一位对所有的数字进行分组。

在每个组内进行异或操作，得到两个数字

class Solution {
public:
    vector<int> singleNumbers(vector<int>& nums) {
        int Xor=0,a=0,b=0;
        for(int num:nums)
            Xor^=num;
        int x=Xor&(-Xor);
        for(int num:nums){
            if( num&x )
                a^=num;
            else
                b^=num;
        }
        return {a,b};
    }
};
