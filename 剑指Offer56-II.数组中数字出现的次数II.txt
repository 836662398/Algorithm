在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。

示例 1：
输入：nums = [3,4,3,3]
输出：4
示例 2：
输入：nums = [9,1,7,9,7,9,7]
输出：1

限制：
    1 <= nums.length <= 10000
    1 <= nums[i] < 2^31

【方法一】
统计所有数字中每个位中1出现的总数，那么对于某个位，1出现的次数一定是3的倍数+1或0，
那么对这个数%3得到的结果就是目的数字在该位上的值。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res=0;
        for(int i=0;i<32;i++){
            int sum=0;
            for(int num:nums){
                sum+=(num>>i)&1;
            }
            res+=(sum%3)<<i;
        }
        return res;
    }
};
【方法二】
自动状态机，列出真值表，求出逻辑表达式。
https://leetcode-cn.com/problems/single-number-ii/solution/luo-ji-dian-lu-jiao-du-xiang-xi-fen-xi-gai-ti-si-l/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int X=0,Y=0;
        for(int num:nums){
            int tmp_Y=Y;
            Y=(~X)&num&(~Y) | (~X)&(~num)&Y;//Y=(~X)&(N^Y);
            X=num&(~X)&(tmp_Y) | (~num)&X&(~tmp_Y);
        }
        return Y;
    }
};
优化：更新完Y后把Ynew带入原逻辑表替换原Y值形成新的逻辑表，
这个逻辑表对于X来说是跟求Y的时候的逻辑表是同构的，可以由直接求出X和Y新值的逻辑表达式，不需记录原值。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int X=0,Y=0;
        for(int num:nums){
            Y=(~X)&(num^Y);
            X=(~Y)&(num^X);
        }
        return Y;
    }
};

