把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

 
示例 1:
输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]

示例 2:
输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]

 

限制：
1 <= n <= 11

【思路】动态规划
我们可以把n个骰子的点数分解为n-1个骰子的点数加上一个骰子的点数。
1.构造dp数组：tmp[]为n个骰子的点数概率数组，pre[]为n-1个骰子的点数概率数组，
   一个骰子的点数概率数组显然是6个六分之一,不需要另设数组。
2.初始化dp数组：pre[]={1/6d,1/6d,1/6d,1/6d,1/6d,1/6d}
3.构造状态转移方程:tmp[x+y]+=pre[x]*num[y];
class Solution {
public:
    vector<double> twoSum(int n) {
        vector<double> pre={1.0/6,1.0/6,1.0/6,1.0/6,1.0/6,1.0/6};
        for(int i=2;i<=n;i++){
            vector<double> tmp(5*i+1,0);
            for(int j=0;j<5*(i-1)+1;j++){
                for(int k=0;k<6;k++){
                    tmp[j+k]+=pre[j]/6.0;
                }
            }
            pre=tmp;
        }
        return pre;
    }
};
