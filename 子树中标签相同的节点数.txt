子树中标签相同的节点数

给你一棵树（即，一个连通的无环无向图），这棵树由编号从 0  到 n - 1 的 n 个节点组成，且恰好有 n - 1 条 edges 。树的根节点为节点 0 ，树上的每一个节点都有一个标签，也就是字符串 labels 中的一个小写字符（编号为 i 的 节点的标签就是 labels[i] ）

边数组 edges 以 edges[i] = [ai, bi] 的形式给出，该格式表示节点 ai 和 bi 之间存在一条边。

返回一个大小为 n 的数组，其中 ans[i] 表示第 i 个节点的子树中与节点 i 标签相同的节点数。

树 T 中的子树是由 T 中的某个节点及其所有后代节点组成的树。


【思路】树形DP、后序遍历
对每个点统计子树节点某个值的和的问题,只需要在DFS过程中累加值,
每个点离开的时候的值减去每个点进来的时候的值就是答案
class Solution {
public:
    vector<int> res;
    vector<int> memo=vector<int>(26,0);
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        res=vector<int>(n);
        vector<vector<int>> v(n);//记录每个节点相邻节点
        int len=edges.size();
        for(int i=0;i<len;i++){
            v[edges[i][1]].push_back(edges[i][0]);
            v[edges[i][0]].push_back(edges[i][1]);
        }
        dfs(v,0,-1,labels);
        return res;
    }
    void dfs(vector<vector<int>>& v,int index,int pre,string &labels){//pre意味着父节点
        int c=labels[index]-'a';
        int begin=memo[c];
        memo[c]++;
        for(int num:v[index]){
            if(num==pre)    continue;//该相邻节点是父节点时跳过
            dfs(v,num,index,labels);
        }
        res[index]=memo[c]-begin;
    }
};
【function写法】
class Solution {
public:
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        vector<int> res(n);
        vector<int> memo=vector<int>(26,0);
        vector<vector<int>> v(n);//记录每个节点相邻节点
        int len=edges.size();
        for(int i=0;i<len;i++){
            v[edges[i][1]].push_back(edges[i][0]);
            v[edges[i][0]].push_back(edges[i][1]);
        }
        function<void(int,int)> dfs=[&](int index,int pre){
            int c=labels[index]-'a';
            int begin=memo[c];
            memo[c]++;
            for(int num:v[index]){
                if(num==pre)    continue;//该相邻节点是父节点时跳过
                dfs(num,index);
            }
            res[index]=memo[c]-begin;
        };
        dfs(0,-1);
        return res;
    }
};