给你一个数组 nums 表示 1 到 n 的一个排列。我们按照元素在 nums 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 nums 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 nums 原本数字顺序得到的二叉查找树相同。

比方说，给你 nums = [2,1,3]，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组 [2,3,1] 也能得到相同的 BST，但 [3,2,1] 会得到一棵不同的 BST 。

请你返回重排 nums 后，与原数组 nums 得到相同二叉查找树的方案数。

由于答案可能会很大，请将结果对 10^9 + 7 取余数。

 

示例 1：

输入：nums = [2,1,3]
输出：1
解释：我们将 nums 重排， [2,3,1] 能得到相同的 BST 。没有其他得到相同 BST 的方案了。

示例 2：

输入：nums = [3,4,5,1,2]
输出：5
解释：下面 5 个数组会得到相同的 BST：
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]

示例 3：

输入：nums = [1,2,3]
输出：0
解释：没有别的排列顺序能得到相同的 BST 。

示例 4：

输入：nums = [3,1,2,5,4,6]
输出：19

示例  5：

输入：nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]
输出：216212978
解释：得到相同 BST 的方案数是 3216212999。将它对 10^9 + 7 取余后得到 216212978。

 

提示：

    1 <= nums.length <= 1000
    1 <= nums[i] <= nums.length
    nums 中所有数 互不相同 。

【思路】树形DP
对于任何一个数组,确定根节点（首个元素）后,我们可以将剩下元素分成大于根节点（右子树）和小于根节点（左子树）两种。
容易发现，交换右子树中元素与左子树中元素之间的位置，不影响最后生成的二叉查找树。
因此，设右子树有nnn个元素，左子树有mmm个元素，总的方法数就等于C(n+m,n)⋅F(left)⋅F(right)。
F(left)和F(right)递归求解即可。最后要减1（去掉自身）。


class Solution {
public:
    using ll=long long;
    const int MOD=1e9+7;
    int C[1005][1005]{};//组合数
    int numOfWays(vector<int>& nums) {
        C[0][0]=1;//打表求解组合数
        for(int i=1;i<=1000;i++){
            C[i][0]=1;
            for(int j=1;j<=i;j++)
                C[i][j]=(C[i-1][j-1]+C[i-1][j]) % MOD;
        }
        return DFS(nums)-1;
    }
    ll DFS(vector<int>& arr){
        int n=arr.size();
        if(n<=1)    return 1;
        vector<int> left,right; 
        for(int i=1;i<n;i++){
            if(arr[i]<arr[0])
                left.push_back(arr[i]);
            else if(arr[i]>arr[0])
                right.push_back(arr[i]);
        }
        ll ans=1ll * C[left.size()+right.size()][left.size()] * DFS(left) % MOD;
        ans= ans * DFS(right) % MOD;
        return ans;
    }
};

【优化】逆元+快速幂 求组合数
class Solution {
public:
    using ll=long long;
    ll fac[1000 + 5]{};
    const int MOD=1e9+7;
    int numOfWays(vector<int>& nums) {
        //预处理求fac，fac[i] = i!%p
        fac[0] = 1;
        for (int i = 1; i <= nums.size(); i++)
            fac[i] = fac[i - 1] * i % MOD;
        return DFS(nums)-1;
    }
    //快速幂求x^n%MOD
    ll quickPow(ll x, ll n) {
        ll res = 1;
        while (n) {
            if (n & 1)
                res = res * x % MOD;
            x = x * x % MOD;
            n >>= 1;
        }
        return res;
    }
    int C(int n, int m) {
        return fac[n] * quickPow(fac[m], MOD - 2) % MOD * quickPow(fac[n - m], MOD - 2) % MOD;
    }
    ll DFS(vector<int>& arr){
        int n=arr.size();
        if(n<=1)    return 1;
        vector<int> left,right; 
        for(int i=1;i<n;i++){
            if(arr[i]<arr[0])
                left.push_back(arr[i]);
            else if(arr[i]>arr[0])
                right.push_back(arr[i]);
        }
        ll ans=1ll * C(left.size()+right.size(),left.size()) * DFS(left) % MOD *DFS(right) % MOD;
        return ans;
    }
};