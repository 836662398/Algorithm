给你一个字符串 s 以及两个整数 a 和 b 。其中，字符串 s 的长度为偶数，且仅由数字 0 到 9 组成。

你可以在 s 上按任意顺序多次执行下面两个操作之一：

    累加：将  a 加到 s 中所有下标为奇数的元素上（下标从 0 开始）。数字一旦超过 9 就会变成 0，如此循环往复。
例如，s = "3456" 且 a = 5，则执行此操作后 s 变成 "3951"。
    轮转：将 s 向右轮转 b 位。例如，s = "3456" 且 b = 1，则执行此操作后 s 变成 "6345"。

请你返回在 s 上执行上述操作任意次后可以得到的 字典序最小 的字符串。

如果两个字符串长度相同，那么字符串 a 字典序比字符串 b 小可以这样定义：在 a 和 b 出现不同的第一个位置上，
字符串 a 中的字符出现在字母表中的时间早于 b 中的对应字符。例如，"0158” 字典序比 "0190" 小，因为不同的第一个位置是在第三个字符，
显然 '5' 出现在 '9' 之前。

 

示例 1：

输入：s = "5525", a = 9, b = 2
输出："2050"
解释：执行操作如下：
初态："5525"
轮转："2555"
累加："2454"
累加："2353"
轮转："5323"
累加："5222"
累加："5121"
轮转："2151"
累加："2050"​​​​​​​​​​​​
无法获得字典序小于 "2050" 的字符串。

示例 2：

输入：s = "74", a = 5, b = 1
输出："24"
解释：执行操作如下：
初态："74"
轮转："47"
累加："42"
轮转："24"​​​​​​​​​​​​
无法获得字典序小于 "24" 的字符串。

示例 3：

输入：s = "0011", a = 4, b = 2
输出："0011"
解释：无法获得字典序小于 "0011" 的字符串。

示例 4：

输入：s = "43987654", a = 7, b = 3
输出："00553311"

 

提示：

    2 <= s.length <= 100
    s.length 是偶数
    s 仅由数字 0 到 9 组成
    1 <= a <= 9
    1 <= b <= s.length - 1

【方法一】暴力搜索+哈希
枚举所有情况并用哈希记录，重复情况略去。
class Solution {
public:
    unordered_set<string> memo;
    string res="A";
    int n;
    string findLexSmallestString(string s, int a, int b) {
        n=s.size();
        helper1(s,a,b);
        helper2(s,a,b);
        return res;
    }
    void helper1(string s,int a,int b){
        if(s<res)
            res = s;
        for(int i=1;i<n;i+=2){
            s[i] += a;
            if(s[i]>'9')
                s[i] -=10;
        }
        if(memo.count(s))   return;
        else
            memo.insert(s);
        helper1(s,a,b);
        helper2(s,a,b);
    }
    void helper2(string s,int a,int b){
        if(s<res)
            res=s;
        s=(s+s).substr(b,n);
        if(memo.count(s))   return;
        else
            memo.insert(s);
        helper1(s,a,b);
        helper2(s,a,b);
    }
};

【方法二】优化暴力：
轮转操作：对于一个长度为N的字符串，每次轮转（右移）b个位置，等价于轮转g=GCD(N,b)个位置。
所以，我们只需要以ggg为步长进行轮转的枚举即可。

增加操作：如果g是偶数，那么不管怎么轮转，我们只能对下标为奇数的位置进行增加操作；
否则，我们也可以对下标为偶数的位置进行增加操作。根据这两种情况，枚举奇数和偶数位置的增加操作的次数即可。
因为每一位是[0,9]之间的数，而1≤a≤9，所以我们只需要枚举操作[0,9]次的情形。

class Solution {
    int gcd(int x, int y) {
        return y == 0 ? x : gcd(y, x % y);
    }
public:
    string findLexSmallestString(string s, int a, int b) {
        int n = s.size();
        string ans = s;
        string t = s + s;
        int g = gcd(n, b);
        for (int i = 0; i < n; i += g) {
            string p = t.substr(i, n);
            for (int j = 0; j <= 9; ++j) {
                int th = g % 2 == 0 ? 0 : 9;
                for (int k = 0; k <= th; ++k) {
                    string q(p);
                    for (int t = 1; t < n; t += 2)
                        q[t] = '0' + (q[t] - '0' + a * j) % 10;
                    for (int t = 0; t < n; t += 2)
                        q[t] = '0' + (q[t] - '0' + a * k) % 10;
                    ans = min(ans, q);
                }
            }
        }
        return ans;
    }
};





