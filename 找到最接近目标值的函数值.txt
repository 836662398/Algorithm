找到最接近目标值的函数值

func(arr,l,r)意味arr[l,……,r]按位与之和
他有一个整数数组 arr 和一个整数 target ，他想找到让 |func(arr, l, r) - target| 最小的 l 和 r 。

请你返回 |func(arr, l, r) - target| 的最小值。

请注意， func 的输入参数 l 和 r 需要满足 0 <= l, r < arr.length 。

示例 1：

输入：arr = [9,12,3,7,15], target = 5
输出：2
解释：所有可能的 [l,r] 数对包括 [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]]， Winston 得到的相应结果为 [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0] 。最接近 5 的值是 7 和 3，所以最小差值为 2 。

示例 2：

输入：arr = [1000000,1000000,1000000], target = 1
输出：999999
解释：Winston 输入函数的所有可能 [l,r] 数对得到的函数值都为 1000000 ，所以最小差值为 999999 。

示例 3：

输入：arr = [1,2,4,8,16], target = 0
输出：0

提示：
    1 <= arr.length <= 10^5
    1 <= arr[i] <= 10^6
    0 <= target <= 10^7

 【思路】
func(arr, l, r) = arr[l] & func(arr, l+1, r)，由于按位与本身的性质，a & b 的结果不会大于 a 也不会大于 b，
因此 func(arr, l, r) <= func(arr, l+1, r)。

对于固定的 r，一开始的按位与之和就是 arr[r]，随后会变成 arr[r-1] & arr[r]，arr[r-2] & arr[r-1] & arr[r] 等等。
由于 arr[r] <= 10^6 < 2^20，因此它的二进制表示中最多有 20 个 1。而每做一次按位与运算，如果这个值发生了变化，
那么会有若干个 1 变成了 0，然而 0 却不能变回 1。因此对于固定的 r，func(arr, l, r) 的值最多只有 20 种。

步骤：
我们从小到大遍历 r，并用一个集合维护所有的 func(arr, l, r) 的值，集合的大小小于等于 20。
当我们遍历到 r+1 时，新的值为原集合中的每个值和 arr[r+1] 进行按位与运算得到的结果，附带一个 arr[r+1] 本身。
我们对这些新的值进行去重，就可以得到 func(arr, l, r+1) 的值。

class Solution {
public:
    int closestToTarget(vector<int>& arr, int target) {
        int n=arr.size();
        int res=abs(arr[0]-target);
        vector<int> valid;//用来存放以i-1为结尾的所有按位与之和（i为当前索引），单调递减
        for(int num:arr){
            vector<int> newValid={num};//用来存放以i为结尾的所有按位与之和，单调递减
            res=min(res,abs(num-target));
            for(int pre:valid){
                if(pre==newValid.back())
                    continue;
                newValid.push_back(pre&num);
                res=min(res,abs((pre&num)-target));
            }
            valid=move(newValid);
        }
        return res;
    }
};







