给你一个 n x n 的二进制网格 grid，每一次操作中，你可以选择网格的 相邻两行 进行交换。
一个符合要求的网格需要满足主对角线以上的格子全部都是 0 。
请你返回使网格满足要求的最少操作次数，如果无法使网格符合要求，请你返回 -1 。
主对角线指的是从 (1, 1) 到 (n, n) 的这些格子。

示例 1：
输入：grid = [[0,0,1],[1,1,0],[1,0,0]]
输出：3

示例 2：
输入：grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
输出：-1
解释：所有行都是一样的，交换相邻行无法使网格符合要求。

示例 3：
输入：grid = [[1,0,0],[1,1,0],[1,1,1]]
输出：0

提示：
    n == grid.length
    n == grid[i].length
    1 <= n <= 200
    grid[i][j] 要么是 0 要么是 1 。

【思路】
记录每一行最后一个1的位置；
从第一行开始，如果该行后缀0个数不满足条件(即firstOne[j]>i)，
那么就往下遍历找到最先（贪心，这是最小次数）满足条件的行，一行一行换上来，记录交换的次数；
下一次从下一行开始循环，直至最后一行。

class Solution {
    int firstOne[205];

   public:
    int minSwaps(vector<vector<int>>& grid) {
        int n = grid.size(), j, res = 0;
        for (int i = 0; i < n; i++) {
            for (j = n - 1; j >= 0; j--)
                if (grid[i][j])
                    break;
            firstOne[i] = j;
        }
        for (int i = 0; i < n; i++) {
            for (j = i; j < n; j++)
                if (firstOne[j] <= i)//从i行开始往后寻找第一个满足该行0数量的那一行。
                    break;
            if (j == n)//没有满足条件的行
                return -1;
            for (; j > i; j--, res++)
                swap(firstOne[j], firstOne[j - 1]);
        }
        return res;
    }
};