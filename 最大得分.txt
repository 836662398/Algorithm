5478. 最大得分你有两个 有序 且数组内元素互不相同的数组 nums1 和 nums2 。

一条 合法路径 定义如下：

    选择数组 nums1 或者 nums2 开始遍历（从下标 0 处开始）。
    从左到右遍历当前数组。
    如果你遇到了 nums1 和 nums2 中都存在的值，那么你可以切换路径到另一个数组对应数字处继续遍历（但在合法路径中重复数字只会被统计一次）。

得分定义为合法路径中不同数字的和。

请你返回所有可能合法路径中的最大得分。

由于答案可能很大，请你将它对 10^9 + 7 取余后返回。

示例 1：

输入：nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
输出：30
解释：合法路径包括：
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],（从 nums1 开始遍历）
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]  （从 nums2 开始遍历）
最大得分为上图中的绿色路径 [2,4,6,8,10] 。

示例 2：

输入：nums1 = [1,3,5,7,9], nums2 = [3,5,100]
输出：109
解释：最大得分由路径 [1,3,5,100] 得到。

示例 3：

输入：nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
输出：40
解释：nums1 和 nums2 之间无相同数字。
最大得分由路径 [6,7,8,9,10] 得到。

示例 4：

输入：nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]
输出：61

提示：
    1 <= nums1.length <= 10^5
    1 <= nums2.length <= 10^5
    1 <= nums1[i], nums2[i] <= 10^7
    nums1 和 nums2 都是严格递增的数组。

【方法一】双指针
将两指针分别放在两路末尾，从后往前遍历；
每次循环，大的指针往前一步，遇到两指针大小相同，则整合一下数据，两指针都往前一步。
class Solution {
    typedef long long ll;
    const int P = 1000000007;
   public:
    int maxSum(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size(), i, j;
        long long s1 = 0, s2 = 0;
        for (i = n - 1, j = m - 1; i >= 0 && j >= 0;)
            if (nums1[i] > nums2[j]) {
                s1 += nums1[i];
                i--;
            } else if (nums1[i] < nums2[j]) {
                s2 += nums2[j];
                j--;
            } else {
                s1 = s2 = max(s1, s2) + nums1[i];
                i--;
                j--;
            }
        for (; i >= 0; i--)
            s1 += nums1[i];
        for (; j >= 0; j--)
            s2 += nums2[j];
        return max(s1, s2) % P;
    }
};

【方法二】dp
class Solution {
   public:
    int maxSum(vector<int>& nums1, vector<int>& nums2) {
        const int mod = 1e9 + 7;
        int n1 = nums1.size(), n2 = nums2.size();
        int maxnum = max(nums1[n1 - 1], nums2[n2 - 1]);
        long long dp[maxnum + 1];
        memset(dp, 0, sizeof(dp));
        unordered_map<int, int> index1, index2;
        for (int i = 1; i < n1; i++)
            index1[nums1[i]] = nums1[i - 1];
        for (int i = 1; i < n2; i++)
            index2[nums2[i]] = nums2[i - 1];
        vector<int> nums(n1 + n2);
        int c1 = 0, c2 = 0, c = 0;
        while (c1 < n1 && c2 < n2)
            nums[c++] = nums1[c1] < nums2[c2] ? nums1[c1++] : nums2[c2++];
        while (c1 < n1)
            nums[c++] = nums1[c1++];
        while (c2 < n2)
            nums[c++] = nums2[c2++];
        int n3 = unique(nums.begin(), nums.end()) - nums.begin();
        for (int i = 0; i < n3; i++) {
            dp[nums[i]] =
                nums[i] + max(index1.count(nums[i]) ? dp[index1[nums[i]]] : 0,
                              index2.count(nums[i]) ? dp[index2[nums[i]]] : 0);
        }
        return max(dp[nums1[n1 - 1]], dp[nums2[n2 - 1]]) % mod;
    }
};