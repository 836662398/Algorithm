服务中心的最佳位置

一家快递公司希望在新城市建立新的服务中心。公司统计了该城市所有客户在二维地图上的坐标，并希望能够以此为依据为新的服务中心选址：使服务中心 到所有客户的欧几里得距离的总和最小 。

给你一个数组 positions ，其中 positions[i] = [xi, yi] 表示第 i 个客户在二维地图上的位置，返回到所有客户的 欧几里得距离（平面两点距离）的最小总和 。

换句话说，请你为服务中心选址，该位置的坐标 [xcentre, ycentre] 需要使下面的公式取到最小值：

与真实值误差在 10^-5 之内的答案将被视作正确答案。

示例 2：
输入：positions = [[1,1],[3,3]]
输出：2.82843
解释：欧几里得距离可能的最小总和为 sqrt(2) + sqrt(2) = 2.82843

示例 3：

输入：positions = [[1,1]]
输出：0.00000

示例 4：

输入：positions = [[1,1],[0,0],[2,0]]
输出：2.73205
解释：乍一看，你可能会将中心定在 [1, 0] 并期待能够得到最小总和，但是如果选址在 [1, 0] 距离总和为 3
如果将位置选在 [1.0, 0.5773502711] ，距离总和将会变为 2.73205
当心精度问题！

示例 5：

输入：positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]
输出：32.94036
解释：你可以用 [4.3460852395, 4.9813795505] 作为新中心的位置

【思路】多边费马点问题
模拟退火算法：
先定一个接近答案的初始点x,每次以固定步长往上下左右（周围）搜索，如果能找到比当前距离更小（更接近答案）的点，
则更新点，从该点开始重新搜索，否则缩短步长重新搜索。循环，直至精度满足要求。

vector<vector<double>> d={{-1,0},{0,-1},{0,1},{1,0}};
class Solution {
public:
    double getMinDistSum(vector<vector<int>>& positions) {
        const double eps=1e-8;//迭代精度
        double x=0,y=0;
        int len=positions.size();
        for(auto &p:positions){
            x+=p[0];
            y+=p[1];
        }
        x=x/len,y=y/len;
        auto dist=[&](const double a,const double b){//double类型，如果是int则出错
            double res=0;
            for(auto &p:positions){
                res+=sqrt((a-p[0])*(a-p[0])+(b-p[1])*(b-p[1]));
            }
            return res;
        };
        double res=dist(x,y);
        double step=1;
        while(step>eps){
            bool flag=false;
            for(int i=0;i<4;i++){
                double ix=x+step * d[i][0];
                double iy=y+step * d[i][1];
                double tmp=dist(ix,iy);
                if(tmp<res){
                    res=tmp;
                    x=ix;
                    y=iy;
                    flag=1;
                    break;
                }
            }
            if(!flag)
                step/=2;//步长减半
        }
        return res;
    }
};