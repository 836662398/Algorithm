给你一个整数数组 nums 和一个整数 target 。

请你统计并返回 nums 中能满足其最小元素与最大元素的 和 小于或等于 target 的 非空 子序列的数目。

由于答案可能很大，请将结果对 10^9 + 7 取余后返回。

示例 1：
输入：nums = [3,5,6,7], target = 9
输出：4
解释：有 4 个子序列满足该条件。
[3] -> 最小元素 + 最大元素 <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

示例 2：
输入：nums = [3,3,6,8], target = 10
输出：6
解释：有 6 个子序列满足该条件。（nums 中可以有重复数字）
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

示例 3：
输入：nums = [2,3,3,4,6,7], target = 12
输出：61
解释：共有 63 个非空子序列，其中 2 个不满足条件（[6,7], [7]）
有效序列总数为（63 - 2 = 61）

示例 4：
输入：nums = [5,2,4,1,7,6,8], target = 16
输出：127
解释：所有非空子序列都满足条件 (2^7 - 1) = 127

提示：
    1 <= nums.length <= 10^5
    1 <= nums[i] <= 10^6
    1 <= target <= 10^6

【方法一】双指针
先排序，使其有序可使用双指针，然后left指针表示该次循环以left元素作为最小值，根据left找到其最大可能的right元素，
2^(right-left)就是以left为序列最小元素所有可能的序列，因为会溢出，所以需要自己写pow。
class Solution {
public:
    const int mod=1e9+7;
    using ll=long long;
    ll quickpow(ll a,ll b){
        ll res=1;
        while(b>0){
            if(b&1)
                res=(res*a)%mod;
            a=(a*a)%mod;
            b>>=1;
        }
        return res;
    }
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int len=nums.size();
        int left=0,right=len-1;
        int res=0;
        while(left<=right){
            while(left<=right && nums[left]+nums[right]>target)
                right--;
            if(left>right)
                break;
            res=(res+quickpow(2,right-left))%mod;
            left++;
        }
        return res;
    }
};
【方法二】临时表
用数组记录2^n % mode ，就不需要自己写pow了
class Solution {
public:
    const int mod=1e9+7;
    int numSubseq(vector<int>& nums, int target) {
        int len=nums.size();
        sort(nums.begin(),nums.end());
        int left=0,right=len-1;
        int res=0;
        vector<int> dp(1e6+1);
        dp[0] = 1;
        for (int i = 1; i <= len; i ++) {
            dp[i] = (dp[i-1] * 2 ) %mod;
        }
        while(left<=right){
            while(left<=right && nums[left]+nums[right]>target)
                right--;
            if(left>right)
                break;
            res=(res+dp[right-left])%mod;
            left++;
        }
        return res;
    }
};
