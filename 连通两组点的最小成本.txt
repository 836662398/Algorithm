给你两组点，其中第一组中有 size1 个点，第二组中有 size2 个点，且 size1 >= size2 。

任意两点间的连接成本 cost 由大小为 size1 x size2 矩阵给出，其中 cost[i][j] 是第一组中的点 i 和第二组中的点 j 的连接成本。如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。

返回连通两组点所需的最小成本。

 

示例 1：

输入：cost = [[15, 96], [36, 2]]
输出：17
解释：连通两组点的最佳方法是：
1--A
2--B
总成本为 17 。

示例 2：

输入：cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
输出：4
解释：连通两组点的最佳方法是：
1--A
2--B
2--C
3--A
最小成本为 4 。
请注意，虽然有多个点连接到第一组中的点 2 和第二组中的点 A ，但由于题目并不限制连接点的数目，所以只需要关心最低总成本。

示例 3：

输入：cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
输出：10

 

提示：

    size1 == cost.length
    size2 == cost[i].length
    1 <= size1, size2 <= 12
    size1 >= size2
    0 <= cost[i][j] <= 100

【思路】
题目意思为一个矩阵选取其中某些元素，使其每行和每列都有元素被选，求出最小的选择代价。

状压DP：dp[i][j]表示当前选取到第 i 行, 列的选取状况为 j 时总的最小开销。
对于每一行只需要考虑两种情况：
1.选择一个元素（无论状态是否变化）；
2.从last 子集中进行元素选择，必然使状态变化。

忽略其他会不可能为最优解的情况。

求last子集需要用到 枚举子集 优化。
https://cp-wiki.vercel.app/basic/enumerate/#%E6%9E%9A%E4%B8%BE%E7%9A%84%E9%A1%BA%E5%BA%8F

class Solution {
public:
    int connectTwoGroups(vector<vector<int>>& cost) {
        int dp[15][5000];
        int m=cost.size(),n=cost[0].size();
        int lim=(1<<n) - 1;
        memset(dp,0x3f,sizeof(dp));
        dp[0][0]=0;
        for(int i=1;i<=m;i++){
            for(int last=0;last<=lim;last++){
	忽略初始dp[0][m],m非0情况
                if(dp[i-1][last]==0x3f3f3f3f)
                    continue;
	//列举该行选取每一个元素的情况，有可能使状态不变：nxt=last
                for(int k=0;k<n;k++){
                    int state=last | (1<<k);
                    dp[i][state]=min(dp[i][state],dp[i-1][last]+cost[i-1][k]);
                }
                int complement= lim-last;//补集
	//枚举子集，重点是j=complement & (j-1)
                for(int j=complement;j;j=complement & (j-1)){
                    int sum=0;
                    for(int k=0;k<n;k++)
                        if (j & (1 << k))
                            sum += cost[i-1][k];
                    int state=last | j;
                    dp[i][state]=min(dp[i][state],dp[i-1][last]+sum);
                }
            }
        }
        return dp[m][lim];
    }
};