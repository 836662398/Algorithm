编写程序以 x 为基准分割链表，使得所有小于 x 的节点排在大于或等于 x 的节点之前。如果链表中包含 x，x 只需出现在小于 x 的元素之后(如下所示)。分割元素 x 只需处于“右半部分”即可，其不需要被置于左右两部分之间。

示例:

输入: head = 3->5->8->5->10->2->1, x = 5
输出: 3->1->2->10->5->5->8

【方法一】头插法
遍历链表，找到比x小的插入头部，第一个节点必须跳过，因为已经在头部。
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode dummyHead(0);
        dummyHead.next=head;
        ListNode * tmp=head;
        ListNode * tmppre=&dummyHead;
        if(head==NULL)  return head;
        //头结点必须跳过
        tmp=tmp->next;
        tmppre=tmppre->next;
        while(tmp){
            if(tmp->val<x){
                auto tmpnxt=tmp->next;
                tmppre->next=tmpnxt;
                tmp->next=dummyHead.next;
                dummyHead.next=tmp;
                tmp=tmpnxt;
                
            }else{
                tmp=tmp->next;
                tmppre=tmppre->next;
            }
            
        }
        return dummyHead.next;
    }
};

【方法二】两个链表
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode p(0),q(0);
        ListNode *less=&p ,*more=&q;
        while(head){
            if(head->val<x){
                less->next=head;
                less=head;
            }else{
                more->next=head;
                more=head;
            }
            head=head->next;
        }
        less->next=q.next;
        more->next=nullptr;
        return p.next;
    }
};