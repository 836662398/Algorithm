输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。

 

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1

返回:
[
   [5,4,11,2],
   [5,8,4,5]
]

提示：

    节点总数 <= 10000

【思路】dfs回溯
class Solution {
public:
    int sum;
    vector<vector<int>> res;
    vector<vector<int>> pathSum(TreeNode* root, int sum) { 
        this->sum=sum;
        vector<int> vec;
        dfs(root,0,vec);
        return res;
    }
    void dfs(TreeNode* root,int sumnow,vector<int> &vec){
        if(!root)   return;
        sumnow+=root->val;
        vec.push_back(root->val);
        if(!root->left&&!root->right&& sumnow==sum)
            res.push_back(vec);
        dfs(root->left,sumnow,vec);
        dfs(root->right,sumnow,vec);
        vec.pop_back();
    }
};