输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。

序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。

示例 1：
输入：target = 9
输出：[[2,3,4],[4,5]]

示例 2：
输入：target = 15
输出：[[1,2,3,4,5],[4,5,6],[7,8]]
限制：

    1 <= target <= 10^5

【方法一】滑动窗口（双指针）
class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) {
        vector<vector<int>> res;
        int sum=1,left=1,right=1;
        while(right<=(target+1)/2){
            if(sum<target){
                right++;
                sum+=right;
            }
            else if(sum>target){
                sum-=left;
                left++;
            }
            else{
                vector<int> tmp;
                for(int i=left;i<=right;i++)
                    tmp.push_back(i);
                res.push_back(tmp);
                right++;
                sum+=right;
            }
        }
        return res;
    }
};
【方法二】数学运算
由起始点x，可以根据等差数列求和公式，算出和为target时对应的末尾y。
注意，因为容易溢出，所以得用long 或long long类型
class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) {
        vector<vector<int>> res;
        long x,y;
        for(long i=1;i<=target/2;i++){//i用long类型
            vector<int> tmp;
            x=4*i*(i-1)+8*target+1;
            y=(int)sqrt(x);
            if(x!=y*y || y&1 ==0)  continue;
            y=(y-1)/2;
            for(int j=i;j<=y;j++)   
                tmp.push_back(j);
            res.push_back(tmp);
        }
        return res;
    }
};
【方法三】更快的数学方法：
一个以 a1​ 为首项，以 1 为公差，以 n 为项数的等差数列的和为 target，
target=n*a1​+n(n−1)/2
转化为a1​=（target - n*(n-1)/2）/ n
目标是找出所有满足条件的 n、a1 对，
思路是对 n 从 2 开始遍历（题目要求最少是 2 个数），验证 a1 是否为正整数。
有一个问题是 n 遍历到多少呢？
其实不需要特地去算 n 的上限，随着 n 的递增，a1​ 递减，当 a1<=0时跳出循环即可。
class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) {
        vector<vector<int>> res;
        for(int i=2;i<target;i++){
            double begin=(double)(target-i*(i-1)/2)/i;
            vector<int> tmp;
            if(begin<=0)
                break;
            if(begin==(int)begin){
                for(int j=begin;j<=begin + i-1;j++)
                    tmp.push_back(j);
                res.push_back(tmp);
            }
        }
        reverse(res.begin(),res.end());
        return res;
    }
};
时间复杂度：O(根号target)